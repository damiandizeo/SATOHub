(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Frisbee = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
},{}],2:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;
},{"./arrayLikeToArray":1}],3:[function(require,module,exports){
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;
},{}],4:[function(require,module,exports){
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
},{}],5:[function(require,module,exports){
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
},{}],6:[function(require,module,exports){
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
},{}],7:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
},{}],8:[function(require,module,exports){
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

module.exports = _iterableToArray;
},{}],9:[function(require,module,exports){
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
},{}],10:[function(require,module,exports){
var arrayWithoutHoles = require("./arrayWithoutHoles");

var iterableToArray = require("./iterableToArray");

var unsupportedIterableToArray = require("./unsupportedIterableToArray");

var nonIterableSpread = require("./nonIterableSpread");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;
},{"./arrayWithoutHoles":2,"./iterableToArray":8,"./nonIterableSpread":9,"./unsupportedIterableToArray":12}],11:[function(require,module,exports){
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
},{}],12:[function(require,module,exports){
var arrayLikeToArray = require("./arrayLikeToArray");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
},{"./arrayLikeToArray":1}],13:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":31}],14:[function(require,module,exports){
(function (global){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

(function (factory) {
  typeof define === 'function' && define.amd ? define(factory) : factory();
})(function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && ((0, _typeof2.default)(call) === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  var Emitter = /*#__PURE__*/function () {
    function Emitter() {
      _classCallCheck(this, Emitter);

      Object.defineProperty(this, 'listeners', {
        value: {},
        writable: true,
        configurable: true
      });
    }

    _createClass(Emitter, [{
      key: "addEventListener",
      value: function addEventListener(type, callback) {
        if (!(type in this.listeners)) {
          this.listeners[type] = [];
        }

        this.listeners[type].push(callback);
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, callback) {
        if (!(type in this.listeners)) {
          return;
        }

        var stack = this.listeners[type];

        for (var i = 0, l = stack.length; i < l; i++) {
          if (stack[i] === callback) {
            stack.splice(i, 1);
            return;
          }
        }
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(event) {
        var _this = this;

        if (!(event.type in this.listeners)) {
          return;
        }

        var debounce = function debounce(callback) {
          setTimeout(function () {
            return callback.call(_this, event);
          });
        };

        var stack = this.listeners[event.type];

        for (var i = 0, l = stack.length; i < l; i++) {
          debounce(stack[i]);
        }

        return !event.defaultPrevented;
      }
    }]);

    return Emitter;
  }();

  var AbortSignal = /*#__PURE__*/function (_Emitter) {
    _inherits(AbortSignal, _Emitter);

    function AbortSignal() {
      var _this2;

      _classCallCheck(this, AbortSignal);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(AbortSignal).call(this)); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
      // constructor has failed to run, then "this.listeners" will still be undefined and then we call
      // the parent constructor directly instead as a workaround. For general details, see babel bug:
      // https://github.com/babel/babel/issues/3041
      // This hack was added as a fix for the issue described here:
      // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042

      if (!_this2.listeners) {
        Emitter.call(_assertThisInitialized(_this2));
      } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
      // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl


      Object.defineProperty(_assertThisInitialized(_this2), 'aborted', {
        value: false,
        writable: true,
        configurable: true
      });
      Object.defineProperty(_assertThisInitialized(_this2), 'onabort', {
        value: null,
        writable: true,
        configurable: true
      });
      return _this2;
    }

    _createClass(AbortSignal, [{
      key: "toString",
      value: function toString() {
        return '[object AbortSignal]';
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(event) {
        if (event.type === 'abort') {
          this.aborted = true;

          if (typeof this.onabort === 'function') {
            this.onabort.call(this, event);
          }
        }

        _get(_getPrototypeOf(AbortSignal.prototype), "dispatchEvent", this).call(this, event);
      }
    }]);

    return AbortSignal;
  }(Emitter);

  var AbortController = /*#__PURE__*/function () {
    function AbortController() {
      _classCallCheck(this, AbortController); // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
      // we want Object.keys(new AbortController()) to be [] for compat with the native impl


      Object.defineProperty(this, 'signal', {
        value: new AbortSignal(),
        writable: true,
        configurable: true
      });
    }

    _createClass(AbortController, [{
      key: "abort",
      value: function abort() {
        var event;

        try {
          event = new Event('abort');
        } catch (e) {
          if (typeof document !== 'undefined') {
            if (!document.createEvent) {
              // For Internet Explorer 8:
              event = document.createEventObject();
              event.type = 'abort';
            } else {
              // For Internet Explorer 11:
              event = document.createEvent('Event');
              event.initEvent('abort', false, false);
            }
          } else {
            // Fallback where document isn't available:
            event = {
              type: 'abort',
              bubbles: false,
              cancelable: false
            };
          }
        }

        this.signal.dispatchEvent(event);
      }
    }, {
      key: "toString",
      value: function toString() {
        return '[object AbortController]';
      }
    }]);

    return AbortController;
  }();

  if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
    // These are necessary to make sure that we get correct output for:
    // Object.prototype.toString.call(new AbortController())
    AbortController.prototype[Symbol.toStringTag] = 'AbortController';
    AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';
  }

  function polyfillNeeded(self) {
    if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
      console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');
      return true;
    } // Note that the "unfetch" minimal fetch polyfill defines fetch() without
    // defining window.Request, and this polyfill need to work on top of unfetch
    // so the below feature detection needs the !self.AbortController part.
    // The Request.prototype check is also needed because Safari versions 11.1.2
    // up to and including 12.1.x has a window.AbortController present but still
    // does NOT correctly implement abortable fetch:
    // https://bugs.webkit.org/show_bug.cgi?id=174980#c2


    return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;
  }
  /**
   * Note: the "fetch.Request" default value is available for fetch imported from
   * the "node-fetch" package and not in browsers. This is OK since browsers
   * will be importing umd-polyfill.js from that path "self" is passed the
   * decorator so the default value will not be used (because browsers that define
   * fetch also has Request). One quirky setup where self.fetch exists but
   * self.Request does not is when the "unfetch" minimal fetch polyfill is used
   * on top of IE11; for this case the browser will try to use the fetch.Request
   * default value which in turn will be undefined but then then "if (Request)"
   * will ensure that you get a patched fetch but still no Request (as expected).
   * @param {fetch, Request = fetch.Request}
   * @returns {fetch: abortableFetch, Request: AbortableRequest}
   */


  function abortableFetchDecorator(patchTargets) {
    if ('function' === typeof patchTargets) {
      patchTargets = {
        fetch: patchTargets
      };
    }

    var _patchTargets = patchTargets,
        fetch = _patchTargets.fetch,
        _patchTargets$Request = _patchTargets.Request,
        NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request,
        NativeAbortController = _patchTargets.AbortController,
        _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,
        __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;

    if (!polyfillNeeded({
      fetch: fetch,
      Request: NativeRequest,
      AbortController: NativeAbortController,
      __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL
    })) {
      return {
        fetch: fetch,
        Request: Request
      };
    }

    var Request = NativeRequest; // Note that the "unfetch" minimal fetch polyfill defines fetch() without
    // defining window.Request, and this polyfill need to work on top of unfetch
    // hence we only patch it if it's available. Also we don't patch it if signal
    // is already available on the Request prototype because in this case support
    // is present and the patching below can cause a crash since it assigns to
    // request.signal which is technically a read-only property. This latter error
    // happens when you run the main5.js node-fetch example in the repo
    // "abortcontroller-polyfill-examples". The exact error is:
    //   request.signal = init.signal;
    //   ^
    // TypeError: Cannot set property signal of #<Request> which has only a getter

    if (Request && !Request.prototype.hasOwnProperty('signal') || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
      Request = function Request(input, init) {
        var signal;

        if (init && init.signal) {
          signal = init.signal; // Never pass init.signal to the native Request implementation when the polyfill has
          // been installed because if we're running on top of a browser with a
          // working native AbortController (i.e. the polyfill was installed due to
          // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
          // fake AbortSignal to the native fetch will trigger:
          // TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.

          delete init.signal;
        }

        var request = new NativeRequest(input, init);

        if (signal) {
          Object.defineProperty(request, 'signal', {
            writable: false,
            enumerable: false,
            configurable: true,
            value: signal
          });
        }

        return request;
      };

      Request.prototype = NativeRequest.prototype;
    }

    var realFetch = fetch;

    var abortableFetch = function abortableFetch(input, init) {
      var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init ? init.signal : undefined;

      if (signal) {
        var abortError;

        try {
          abortError = new DOMException('Aborted', 'AbortError');
        } catch (err) {
          // IE 11 does not support calling the DOMException constructor, use a
          // regular error object on it instead.
          abortError = new Error('Aborted');
          abortError.name = 'AbortError';
        } // Return early if already aborted, thus avoiding making an HTTP request


        if (signal.aborted) {
          return Promise.reject(abortError);
        } // Turn an event into a promise, reject it once `abort` is dispatched


        var cancellation = new Promise(function (_, reject) {
          signal.addEventListener('abort', function () {
            return reject(abortError);
          }, {
            once: true
          });
        });

        if (init && init.signal) {
          // Never pass .signal to the native implementation when the polyfill has
          // been installed because if we're running on top of a browser with a
          // working native AbortController (i.e. the polyfill was installed due to
          // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
          // fake AbortSignal to the native fetch will trigger:
          // TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.
          delete init.signal;
        } // Return the fastest promise (don't need to wait for request to finish)


        return Promise.race([cancellation, realFetch(input, init)]);
      }

      return realFetch(input, init);
    };

    return {
      fetch: abortableFetch,
      Request: Request
    };
  }

  (function (self) {
    if (!polyfillNeeded(self)) {
      return;
    }

    if (!self.fetch) {
      console.warn('fetch() is not available, cannot install abortcontroller-polyfill');
      return;
    }

    var _abortableFetch = abortableFetchDecorator(self),
        fetch = _abortableFetch.fetch,
        Request = _abortableFetch.Request;

    self.fetch = fetch;
    self.Request = Request;
    Object.defineProperty(self, 'AbortController', {
      writable: true,
      enumerable: false,
      configurable: true,
      value: AbortController
    });
    Object.defineProperty(self, 'AbortSignal', {
      writable: true,
      enumerable: false,
      configurable: true,
      value: AbortSignal
    });
  })(typeof self !== 'undefined' ? self : global);
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11}],15:[function(require,module,exports){
'use strict';

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
  var i;

  for (i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

},{}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var boolean = function boolean(value) {
  if (typeof value === 'string') {
    return ['true', 't', 'yes', 'y', 'on', '1'].includes(value.trim().toLowerCase());
  }

  if (typeof value === 'number') {
    return value === 1;
  }

  if (typeof value === 'boolean') {
    return value;
  }

  return false;
};

exports.boolean = boolean;

},{}],17:[function(require,module,exports){
(function (Buffer){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var base64 = require('base64-js');

var ieee754 = require('ieee754');

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */

Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}

function typedArraySupport() {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function foo() {
        return 42;
      }
    };
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function get() {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.buffer;
  }
});
Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function get() {
    if (!Buffer.isBuffer(this)) return undefined;
    return this.byteOffset;
  }
});

function createBuffer(length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"');
  } // Return an augmented `Uint8Array` instance


  var buf = new Uint8Array(length);
  buf.__proto__ = Buffer.prototype;
  return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError('The "string" argument must be of type string. Received type number');
    }

    return allocUnsafe(arg);
  }

  return from(arg, encodingOrOffset, length);
} // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97


if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  });
}

Buffer.poolSize = 8192; // not used by this implementation

function from(value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset);
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value);
  }

  if (value == null) {
    throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + (0, _typeof2.default)(value));
  }

  if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof value === 'number') {
    throw new TypeError('The "value" argument must not be of type number. Received type number');
  }

  var valueOf = value.valueOf && value.valueOf();

  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length);
  }

  var b = fromObject(value);
  if (b) return b;

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
  }

  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + (0, _typeof2.default)(value));
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length);
}; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148


Buffer.prototype.__proto__ = Uint8Array.prototype;
Buffer.__proto__ = Uint8Array;

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number');
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"');
  }
}

function alloc(size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
  }

  return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding);
};

function allocUnsafe(size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size);
};

function fromString(string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding);
  }

  var length = byteLength(string, encoding) | 0;
  var buf = createBuffer(length);
  var actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf;
}

function fromArrayLike(array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(length);

  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }

  return buf;
}

function fromArrayBuffer(array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds');
  }

  var buf;

  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  } // Return an augmented `Uint8Array` instance


  buf.__proto__ = Buffer.prototype;
  return buf;
}

function fromObject(obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(len);

    if (buf.length === 0) {
      return buf;
    }

    obj.copy(buf, 0, 0, len);
    return buf;
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0);
    }

    return fromArrayLike(obj);
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data);
  }
}

function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
};

Buffer.compare = function compare(a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf);
    }

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + (0, _typeof2.default)(string));
  }

  var len = string.length;
  var mustMatch = arguments.length > 2 && arguments[2] === true;
  if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
        }

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.toLocaleString = Buffer.prototype.toString;

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
  if (this.length > max) str += ' ... ';
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength);
  }

  if (!Buffer.isBuffer(target)) {
    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + (0, _typeof2.default)(target));
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  }

  var strLen = string.length;

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;

    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

  newBuf.__proto__ = Buffer.prototype;
  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = value >>> 24;
  this[offset + 2] = value >>> 16;
  this[offset + 1] = value >>> 8;
  this[offset] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  this[offset + 2] = value >>> 16;
  this[offset + 3] = value >>> 24;
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;

  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
    var len = bytes.length;

    if (len === 0) {
      throw new TypeError('The value "' + val + '" is invalid for argument "value"');
    }

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

  str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
} // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166


function isInstance(obj, type) {
  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}

function numberIsNaN(obj) {
  // For IE11 support
  return obj !== obj; // eslint-disable-line no-self-compare
}

}).call(this,require("buffer").Buffer)

},{"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11,"base64-js":15,"buffer":17,"ieee754":22}],18:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

function Caseless(dict) {
  this.dict = dict || {};
}

Caseless.prototype.set = function (name, value, clobber) {
  if ((0, _typeof2.default)(name) === 'object') {
    for (var i in name) {
      this.set(i, name[i], value);
    }
  } else {
    if (typeof clobber === 'undefined') clobber = true;
    var has = this.has(name);
    if (!clobber && has) this.dict[has] = this.dict[has] + ',' + value;else this.dict[has || name] = value;
    return has;
  }
};

Caseless.prototype.has = function (name) {
  var keys = Object.keys(this.dict),
      name = name.toLowerCase();

  for (var i = 0; i < keys.length; i++) {
    if (keys[i].toLowerCase() === name) return keys[i];
  }

  return false;
};

Caseless.prototype.get = function (name) {
  name = name.toLowerCase();

  var result, _key;

  var headers = this.dict;
  Object.keys(headers).forEach(function (key) {
    _key = key.toLowerCase();
    if (name === _key) result = headers[key];
  });
  return result;
};

Caseless.prototype.swap = function (name) {
  var has = this.has(name);
  if (has === name) return;
  if (!has) throw new Error('There is no header than matches "' + name + '"');
  this.dict[name] = this.dict[has];
  delete this.dict[has];
};

Caseless.prototype.del = function (name) {
  var has = this.has(name);
  return delete this.dict[has || name];
};

module.exports = function (dict) {
  return new Caseless(dict);
};

module.exports.httpify = function (resp, headers) {
  var c = new Caseless(headers);

  resp.setHeader = function (key, value, clobber) {
    if (typeof value === 'undefined') return;
    return c.set(key, value, clobber);
  };

  resp.hasHeader = function (key) {
    return c.has(key);
  };

  resp.getHeader = function (key) {
    return c.get(key);
  };

  resp.removeHeader = function (key) {
    return c.del(key);
  };

  resp.headers = c.dict;
  return c;
};

},{"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11}],19:[function(require,module,exports){
"use strict";

(function (self) {
  var irrelevant = function (exports) {
    var support = {
      searchParams: 'URLSearchParams' in self,
      iterable: 'Symbol' in self && 'iterator' in Symbol,
      blob: 'FileReader' in self && 'Blob' in self && function () {
        try {
          new Blob();
          return true;
        } catch (e) {
          return false;
        }
      }(),
      formData: 'FormData' in self,
      arrayBuffer: 'ArrayBuffer' in self
    };

    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    }

    if (support.arrayBuffer) {
      var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

      var isArrayBufferView = ArrayBuffer.isView || function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
      };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }

      if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
        throw new TypeError('Invalid character in header field name');
      }

      return name.toLowerCase();
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }

      return value;
    } // Build a destructive iterator for the value list


    function iteratorFor(items) {
      var iterator = {
        next: function next() {
          var value = items.shift();
          return {
            done: value === undefined,
            value: value
          };
        }
      };

      if (support.iterable) {
        iterator[Symbol.iterator] = function () {
          return iterator;
        };
      }

      return iterator;
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function (value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function (name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function (name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };

    Headers.prototype['delete'] = function (name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function (name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null;
    };

    Headers.prototype.has = function (name) {
      return this.map.hasOwnProperty(normalizeName(name));
    };

    Headers.prototype.set = function (name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function (callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };

    Headers.prototype.keys = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push(name);
      });
      return iteratorFor(items);
    };

    Headers.prototype.values = function () {
      var items = [];
      this.forEach(function (value) {
        items.push(value);
      });
      return iteratorFor(items);
    };

    Headers.prototype.entries = function () {
      var items = [];
      this.forEach(function (value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items);
    };

    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'));
      }

      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function (resolve, reject) {
        reader.onload = function () {
          resolve(reader.result);
        };

        reader.onerror = function () {
          reject(reader.error);
        };
      });
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise;
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsText(blob);
      return promise;
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }

      return chars.join('');
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0);
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function (body) {
        this._bodyInit = body;

        if (!body) {
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.

          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function () {
          var rejected = consumed(this);

          if (rejected) {
            return rejected;
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob);
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]));
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob');
          } else {
            return Promise.resolve(new Blob([this._bodyText]));
          }
        };

        this.arrayBuffer = function () {
          if (this._bodyArrayBuffer) {
            return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
          } else {
            return this.blob().then(readBlobAsArrayBuffer);
          }
        };
      }

      this.text = function () {
        var rejected = consumed(this);

        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text');
        } else {
          return Promise.resolve(this._bodyText);
        }
      };

      if (support.formData) {
        this.formData = function () {
          return this.text().then(decode);
        };
      }

      this.json = function () {
        return this.text().then(JSON.parse);
      };

      return this;
    } // HTTP methods whose capitalization should be normalized


    var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method;
    }

    function Request(input, options) {
      options = options || {};
      var body = options.body;

      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read');
        }

        this.url = input.url;
        this.credentials = input.credentials;

        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }

        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;

        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }

      this.credentials = options.credentials || this.credentials || 'same-origin';

      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }

      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal;
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests');
      }

      this._initBody(body);
    }

    Request.prototype.clone = function () {
      return new Request(this, {
        body: this._bodyInit
      });
    };

    function decode(body) {
      var form = new FormData();
      body.trim().split('&').forEach(function (bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
      return form;
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2

      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
        var parts = line.split(':');
        var key = parts.shift().trim();

        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
      return headers;
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = 'statusText' in options ? options.statusText : 'OK';
      this.headers = new Headers(options.headers);
      this.url = options.url || '';

      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function () {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      });
    };

    Response.error = function () {
      var response = new Response(null, {
        status: 0,
        statusText: ''
      });
      response.type = 'error';
      return response;
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function (url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code');
      }

      return new Response(null, {
        status: status,
        headers: {
          location: url
        }
      });
    };

    exports.DOMException = self.DOMException;

    try {
      new exports.DOMException();
    } catch (err) {
      exports.DOMException = function (message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };

      exports.DOMException.prototype = Object.create(Error.prototype);
      exports.DOMException.prototype.constructor = exports.DOMException;
    }

    function fetch(input, init) {
      return new Promise(function (resolve, reject) {
        var request = new Request(input, init);

        if (request.signal && request.signal.aborted) {
          return reject(new exports.DOMException('Aborted', 'AbortError'));
        }

        var xhr = new XMLHttpRequest();

        function abortXhr() {
          xhr.abort();
        }

        xhr.onload = function () {
          var options = {
            status: xhr.status,
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          resolve(new Response(body, options));
        };

        xhr.onerror = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.ontimeout = function () {
          reject(new TypeError('Network request failed'));
        };

        xhr.onabort = function () {
          reject(new exports.DOMException('Aborted', 'AbortError'));
        };

        xhr.open(request.method, request.url, true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }

        if ('responseType' in xhr && support.blob) {
          xhr.responseType = 'blob';
        }

        request.headers.forEach(function (value, name) {
          xhr.setRequestHeader(name, value);
        });

        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);

          xhr.onreadystatechange = function () {
            // DONE (success or failure)
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }

        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      });
    }

    fetch.polyfill = true;

    if (!self.fetch) {
      self.fetch = fetch;
      self.Headers = Headers;
      self.Request = Request;
      self.Response = Response;
    }

    exports.Headers = Headers;
    exports.Request = Request;
    exports.Response = Response;
    exports.fetch = fetch;
    return exports;
  }({});
})(typeof self !== 'undefined' ? self : void 0);

},{}],20:[function(require,module,exports){
(function (process){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console;

  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return (typeof console === "undefined" ? "undefined" : (0, _typeof2.default)(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = require('./common')(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};

}).call(this,require('_process'))

},{"./common":21,"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11,"_process":24}],21:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = require('ms');
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // Disabled?
      if (!debug.enabled) {
        return;
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    newDebug.log = this.log;
    return newDebug;
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @return {String} namespaces
  * @api public
  */


  function disable() {
    var namespaces = [].concat((0, _toConsumableArray2.default)(createDebug.names.map(toNamespace)), (0, _toConsumableArray2.default)(createDebug.skips.map(toNamespace).map(function (namespace) {
      return '-' + namespace;
    }))).join(',');
    createDebug.enable('');
    return namespaces;
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Convert regexp to namespace
  *
  * @param {RegExp} regxep
  * @return {String} namespace
  * @api private
  */


  function toNamespace(regexp) {
    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;

},{"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/toConsumableArray":10,"ms":23}],22:[function(require,module,exports){
"use strict";

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

},{}],23:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = (0, _typeof2.default)(val);

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'weeks':
    case 'week':
    case 'w':
      return n * w;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }

  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }

  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }

  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }

  return ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

},{"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11}],24:[function(require,module,exports){
"use strict";

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

},{}],25:[function(require,module,exports){
'use strict';

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

var util = require('./utils');

var Format = {
  RFC1738: 'RFC1738',
  RFC3986: 'RFC3986'
};
module.exports = util.assign({
  'default': Format.RFC3986,
  formatters: {
    RFC1738: function RFC1738(value) {
      return replace.call(value, percentTwenties, '+');
    },
    RFC3986: function RFC3986(value) {
      return String(value);
    }
  }
}, Format);

},{"./utils":29}],26:[function(require,module,exports){
'use strict';

var stringify = require('./stringify');

var parse = require('./parse');

var formats = require('./formats');

module.exports = {
  formats: formats,
  parse: parse,
  stringify: stringify
};

},{"./formats":25,"./parse":27,"./stringify":28}],27:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var defaults = {
  allowDots: false,
  allowPrototypes: false,
  arrayLimit: 20,
  charset: 'utf-8',
  charsetSentinel: false,
  comma: false,
  decoder: utils.decode,
  delimiter: '&',
  depth: 5,
  ignoreQueryPrefix: false,
  interpretNumericEntities: false,
  parameterLimit: 1000,
  parseArrays: true,
  plainObjects: false,
  strictNullHandling: false
};

var interpretNumericEntities = function interpretNumericEntities(str) {
  return str.replace(/&#(\d+);/g, function ($0, numberStr) {
    return String.fromCharCode(parseInt(numberStr, 10));
  });
};

var parseArrayValue = function parseArrayValue(val, options) {
  if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
    return val.split(',');
  }

  return val;
}; // This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.


var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')
// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.

var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
  var obj = {};
  var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
  var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
  var parts = cleanStr.split(options.delimiter, limit);
  var skipIndex = -1; // Keep track of where the utf8 sentinel was found

  var i;
  var charset = options.charset;

  if (options.charsetSentinel) {
    for (i = 0; i < parts.length; ++i) {
      if (parts[i].indexOf('utf8=') === 0) {
        if (parts[i] === charsetSentinel) {
          charset = 'utf-8';
        } else if (parts[i] === isoSentinel) {
          charset = 'iso-8859-1';
        }

        skipIndex = i;
        i = parts.length; // The eslint settings do not allow break;
      }
    }
  }

  for (i = 0; i < parts.length; ++i) {
    if (i === skipIndex) {
      continue;
    }

    var part = parts[i];
    var bracketEqualsPos = part.indexOf(']=');
    var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;
    var key, val;

    if (pos === -1) {
      key = options.decoder(part, defaults.decoder, charset, 'key');
      val = options.strictNullHandling ? null : '';
    } else {
      key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
      val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function (encodedVal) {
        return options.decoder(encodedVal, defaults.decoder, charset, 'value');
      });
    }

    if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
      val = interpretNumericEntities(val);
    }

    if (part.indexOf('[]=') > -1) {
      val = isArray(val) ? [val] : val;
    }

    if (has.call(obj, key)) {
      obj[key] = utils.combine(obj[key], val);
    } else {
      obj[key] = val;
    }
  }

  return obj;
};

var parseObject = function parseObject(chain, val, options, valuesParsed) {
  var leaf = valuesParsed ? val : parseArrayValue(val, options);

  for (var i = chain.length - 1; i >= 0; --i) {
    var obj;
    var root = chain[i];

    if (root === '[]' && options.parseArrays) {
      obj = [].concat(leaf);
    } else {
      obj = options.plainObjects ? Object.create(null) : {};
      var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
      var index = parseInt(cleanRoot, 10);

      if (!options.parseArrays && cleanRoot === '') {
        obj = {
          0: leaf
        };
      } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
        obj = [];
        obj[index] = leaf;
      } else {
        obj[cleanRoot] = leaf;
      }
    }

    leaf = obj; // eslint-disable-line no-param-reassign
  }

  return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
  if (!givenKey) {
    return;
  } // Transform dot notation to bracket notation


  var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey; // The regex chunks

  var brackets = /(\[[^[\]]*])/;
  var child = /(\[[^[\]]*])/g; // Get the parent

  var segment = options.depth > 0 && brackets.exec(key);
  var parent = segment ? key.slice(0, segment.index) : key; // Stash the parent if it exists

  var keys = [];

  if (parent) {
    // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
    if (!options.plainObjects && has.call(Object.prototype, parent)) {
      if (!options.allowPrototypes) {
        return;
      }
    }

    keys.push(parent);
  } // Loop through children appending to the array until we hit depth


  var i = 0;

  while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
    i += 1;

    if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
      if (!options.allowPrototypes) {
        return;
      }
    }

    keys.push(segment[1]);
  } // If there's a remainder, just add whatever is left


  if (segment) {
    keys.push('[' + key.slice(segment.index) + ']');
  }

  return parseObject(keys, val, options, valuesParsed);
};

var normalizeParseOptions = function normalizeParseOptions(opts) {
  if (!opts) {
    return defaults;
  }

  if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
    throw new TypeError('Decoder has to be a function.');
  }

  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
  }

  var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;
  return {
    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
    allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
    arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
    charset: charset,
    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
    comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
    decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
    delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
    // eslint-disable-next-line no-implicit-coercion, no-extra-parens
    depth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,
    ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
    interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
    parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
    parseArrays: opts.parseArrays !== false,
    plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
  };
};

module.exports = function (str, opts) {
  var options = normalizeParseOptions(opts);

  if (str === '' || str === null || typeof str === 'undefined') {
    return options.plainObjects ? Object.create(null) : {};
  }

  var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
  var obj = options.plainObjects ? Object.create(null) : {}; // Iterate over the keys and setup the new object

  var keys = Object.keys(tempObj);

  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];
    var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
    obj = utils.merge(obj, newObj, options);
  }

  return utils.compact(obj);
};

},{"./utils":29}],28:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var utils = require('./utils');

var formats = require('./formats');

var has = Object.prototype.hasOwnProperty;
var arrayPrefixGenerators = {
  brackets: function brackets(prefix) {
    return prefix + '[]';
  },
  comma: 'comma',
  indices: function indices(prefix, key) {
    return prefix + '[' + key + ']';
  },
  repeat: function repeat(prefix) {
    return prefix;
  }
};
var isArray = Array.isArray;
var push = Array.prototype.push;

var pushToArray = function pushToArray(arr, valueOrArray) {
  push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};

var toISO = Date.prototype.toISOString;
var defaultFormat = formats['default'];
var defaults = {
  addQueryPrefix: false,
  allowDots: false,
  charset: 'utf-8',
  charsetSentinel: false,
  delimiter: '&',
  encode: true,
  encoder: utils.encode,
  encodeValuesOnly: false,
  format: defaultFormat,
  formatter: formats.formatters[defaultFormat],
  // deprecated
  indices: false,
  serializeDate: function serializeDate(date) {
    return toISO.call(date);
  },
  skipNulls: false,
  strictNullHandling: false
};

var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
  return typeof v === 'string' || typeof v === 'number' || typeof v === 'boolean' || (0, _typeof2.default)(v) === 'symbol' || typeof v === 'bigint';
};

var stringify = function stringify(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset) {
  var obj = object;

  if (typeof filter === 'function') {
    obj = filter(prefix, obj);
  } else if (obj instanceof Date) {
    obj = serializeDate(obj);
  } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
    obj = utils.maybeMap(obj, function (value) {
      if (value instanceof Date) {
        return serializeDate(value);
      }

      return value;
    }).join(',');
  }

  if (obj === null) {
    if (strictNullHandling) {
      return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key') : prefix;
    }

    obj = '';
  }

  if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
    if (encoder) {
      var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key');
      return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value'))];
    }

    return [formatter(prefix) + '=' + formatter(String(obj))];
  }

  var values = [];

  if (typeof obj === 'undefined') {
    return values;
  }

  var objKeys;

  if (isArray(filter)) {
    objKeys = filter;
  } else {
    var keys = Object.keys(obj);
    objKeys = sort ? keys.sort(sort) : keys;
  }

  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];
    var value = obj[key];

    if (skipNulls && value === null) {
      continue;
    }

    var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix : prefix + (allowDots ? '.' + key : '[' + key + ']');
    pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
  }

  return values;
};

var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
  if (!opts) {
    return defaults;
  }

  if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
    throw new TypeError('Encoder has to be a function.');
  }

  var charset = opts.charset || defaults.charset;

  if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
    throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
  }

  var format = formats['default'];

  if (typeof opts.format !== 'undefined') {
    if (!has.call(formats.formatters, opts.format)) {
      throw new TypeError('Unknown format option provided.');
    }

    format = opts.format;
  }

  var formatter = formats.formatters[format];
  var filter = defaults.filter;

  if (typeof opts.filter === 'function' || isArray(opts.filter)) {
    filter = opts.filter;
  }

  return {
    addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
    allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
    charset: charset,
    charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
    delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
    encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
    encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
    encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
    filter: filter,
    formatter: formatter,
    serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
    skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
    sort: typeof opts.sort === 'function' ? opts.sort : null,
    strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
  };
};

module.exports = function (object, opts) {
  var obj = object;
  var options = normalizeStringifyOptions(opts);
  var objKeys;
  var filter;

  if (typeof options.filter === 'function') {
    filter = options.filter;
    obj = filter('', obj);
  } else if (isArray(options.filter)) {
    filter = options.filter;
    objKeys = filter;
  }

  var keys = [];

  if ((0, _typeof2.default)(obj) !== 'object' || obj === null) {
    return '';
  }

  var arrayFormat;

  if (opts && opts.arrayFormat in arrayPrefixGenerators) {
    arrayFormat = opts.arrayFormat;
  } else if (opts && 'indices' in opts) {
    arrayFormat = opts.indices ? 'indices' : 'repeat';
  } else {
    arrayFormat = 'indices';
  }

  var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

  if (!objKeys) {
    objKeys = Object.keys(obj);
  }

  if (options.sort) {
    objKeys.sort(options.sort);
  }

  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];

    if (options.skipNulls && obj[key] === null) {
      continue;
    }

    pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.formatter, options.encodeValuesOnly, options.charset));
  }

  var joined = keys.join(options.delimiter);
  var prefix = options.addQueryPrefix === true ? '?' : '';

  if (options.charsetSentinel) {
    if (options.charset === 'iso-8859-1') {
      // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
      prefix += 'utf8=%26%2310003%3B&';
    } else {
      // encodeURIComponent('✓')
      prefix += 'utf8=%E2%9C%93&';
    }
  }

  return joined.length > 0 ? prefix + joined : '';
};

},{"./formats":25,"./utils":29,"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11}],29:[function(require,module,exports){
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var hexTable = function () {
  var array = [];

  for (var i = 0; i < 256; ++i) {
    array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
  }

  return array;
}();

var compactQueue = function compactQueue(queue) {
  while (queue.length > 1) {
    var item = queue.pop();
    var obj = item.obj[item.prop];

    if (isArray(obj)) {
      var compacted = [];

      for (var j = 0; j < obj.length; ++j) {
        if (typeof obj[j] !== 'undefined') {
          compacted.push(obj[j]);
        }
      }

      item.obj[item.prop] = compacted;
    }
  }
};

var arrayToObject = function arrayToObject(source, options) {
  var obj = options && options.plainObjects ? Object.create(null) : {};

  for (var i = 0; i < source.length; ++i) {
    if (typeof source[i] !== 'undefined') {
      obj[i] = source[i];
    }
  }

  return obj;
};

var merge = function merge(target, source, options) {
  /* eslint no-param-reassign: 0 */
  if (!source) {
    return target;
  }

  if ((0, _typeof2.default)(source) !== 'object') {
    if (isArray(target)) {
      target.push(source);
    } else if (target && (0, _typeof2.default)(target) === 'object') {
      if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
        target[source] = true;
      }
    } else {
      return [target, source];
    }

    return target;
  }

  if (!target || (0, _typeof2.default)(target) !== 'object') {
    return [target].concat(source);
  }

  var mergeTarget = target;

  if (isArray(target) && !isArray(source)) {
    mergeTarget = arrayToObject(target, options);
  }

  if (isArray(target) && isArray(source)) {
    source.forEach(function (item, i) {
      if (has.call(target, i)) {
        var targetItem = target[i];

        if (targetItem && (0, _typeof2.default)(targetItem) === 'object' && item && (0, _typeof2.default)(item) === 'object') {
          target[i] = merge(targetItem, item, options);
        } else {
          target.push(item);
        }
      } else {
        target[i] = item;
      }
    });
    return target;
  }

  return Object.keys(source).reduce(function (acc, key) {
    var value = source[key];

    if (has.call(acc, key)) {
      acc[key] = merge(acc[key], value, options);
    } else {
      acc[key] = value;
    }

    return acc;
  }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
  return Object.keys(source).reduce(function (acc, key) {
    acc[key] = source[key];
    return acc;
  }, target);
};

var decode = function decode(str, decoder, charset) {
  var strWithoutPlus = str.replace(/\+/g, ' ');

  if (charset === 'iso-8859-1') {
    // unescape never throws, no try...catch needed:
    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
  } // utf-8


  try {
    return decodeURIComponent(strWithoutPlus);
  } catch (e) {
    return strWithoutPlus;
  }
};

var encode = function encode(str, defaultEncoder, charset) {
  // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
  // It has been adapted here for stricter adherence to RFC 3986
  if (str.length === 0) {
    return str;
  }

  var string = str;

  if ((0, _typeof2.default)(str) === 'symbol') {
    string = Symbol.prototype.toString.call(str);
  } else if (typeof str !== 'string') {
    string = String(str);
  }

  if (charset === 'iso-8859-1') {
    return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
      return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
    });
  }

  var out = '';

  for (var i = 0; i < string.length; ++i) {
    var c = string.charCodeAt(i);

    if (c === 0x2D // -
    || c === 0x2E // .
    || c === 0x5F // _
    || c === 0x7E // ~
    || c >= 0x30 && c <= 0x39 // 0-9
    || c >= 0x41 && c <= 0x5A // a-z
    || c >= 0x61 && c <= 0x7A // A-Z
    ) {
        out += string.charAt(i);
        continue;
      }

    if (c < 0x80) {
      out = out + hexTable[c];
      continue;
    }

    if (c < 0x800) {
      out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
      continue;
    }

    if (c < 0xD800 || c >= 0xE000) {
      out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
      continue;
    }

    i += 1;
    c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
    out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
  }

  return out;
};

var compact = function compact(value) {
  var queue = [{
    obj: {
      o: value
    },
    prop: 'o'
  }];
  var refs = [];

  for (var i = 0; i < queue.length; ++i) {
    var item = queue[i];
    var obj = item.obj[item.prop];
    var keys = Object.keys(obj);

    for (var j = 0; j < keys.length; ++j) {
      var key = keys[j];
      var val = obj[key];

      if ((0, _typeof2.default)(val) === 'object' && val !== null && refs.indexOf(val) === -1) {
        queue.push({
          obj: obj,
          prop: key
        });
        refs.push(val);
      }
    }
  }

  compactQueue(queue);
  return value;
};

var isRegExp = function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer = function isBuffer(obj) {
  if (!obj || (0, _typeof2.default)(obj) !== 'object') {
    return false;
  }

  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var combine = function combine(a, b) {
  return [].concat(a, b);
};

var maybeMap = function maybeMap(val, fn) {
  if (isArray(val)) {
    var mapped = [];

    for (var i = 0; i < val.length; i += 1) {
      mapped.push(fn(val[i]));
    }

    return mapped;
  }

  return fn(val);
};

module.exports = {
  arrayToObject: arrayToObject,
  assign: assign,
  combine: combine,
  compact: compact,
  decode: decode,
  encode: encode,
  isBuffer: isBuffer,
  isRegExp: isRegExp,
  maybeMap: maybeMap,
  merge: merge
};

},{"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11}],30:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty,
    undef;
/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String|Null} The decoded string.
 * @api private
 */

function decode(input) {
  try {
    return decodeURIComponent(input.replace(/\+/g, ' '));
  } catch (e) {
    return null;
  }
}
/**
 * Attempts to encode a given input.
 *
 * @param {String} input The string that needs to be encoded.
 * @returns {String|Null} The encoded string.
 * @api private
 */


function encode(input) {
  try {
    return encodeURIComponent(input);
  } catch (e) {
    return null;
  }
}
/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */


function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g,
      result = {},
      part;

  while (part = parser.exec(query)) {
    var key = decode(part[1]),
        value = decode(part[2]); //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    // In the case if failed decoding, we want to omit the key/value pairs
    // from the result.
    //

    if (key === null || value === null || key in result) continue;
    result[key] = value;
  }

  return result;
}
/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */


function querystringify(obj, prefix) {
  prefix = prefix || '';
  var pairs = [],
      value,
      key; //
  // Optionally prefix with a '?' if needed
  //

  if ('string' !== typeof prefix) prefix = '?';

  for (key in obj) {
    if (has.call(obj, key)) {
      value = obj[key]; //
      // Edge cases where we actually want to encode the value to an empty
      // string instead of the stringified value.
      //

      if (!value && (value === null || value === undef || isNaN(value))) {
        value = '';
      }

      key = encodeURIComponent(key);
      value = encodeURIComponent(value); //
      // If we failed to encode the strings, we should bail out as we don't
      // want to add invalid strings to the query.
      //

      if (key === null || value === null) continue;
      pairs.push(key + '=' + value);
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
} //
// Expose the module.
//


exports.stringify = querystringify;
exports.parse = querystring;

},{}],31:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var runtime = function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  exports.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  exports.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && (0, _typeof2.default)(value) === "object" && hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  exports.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  }; // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.

  return exports;
}( // If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
(typeof module === "undefined" ? "undefined" : (0, _typeof2.default)(module)) === "object" ? module.exports : {});

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11}],32:[function(require,module,exports){
'use strict';
/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */

module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;
  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
      return port !== 80;

    case 'https':
    case 'wss':
      return port !== 443;

    case 'ftp':
      return port !== 21;

    case 'gopher':
      return port !== 70;

    case 'file':
      return false;
  }

  return port !== 0;
};

},{}],33:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

(function (name, context, definition) {
  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();
})('urljoin', void 0, function () {
  function normalize(strArray) {
    var resultArray = [];

    if (strArray.length === 0) {
      return '';
    }

    if (typeof strArray[0] !== 'string') {
      throw new TypeError('Url must be a string. Received ' + strArray[0]);
    } // If the first part is a plain protocol, we combine it with the next part.


    if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
      var first = strArray.shift();
      strArray[0] = first + strArray[0];
    } // There must be two or three slashes in the file protocol, two slashes in anything else.


    if (strArray[0].match(/^file:\/\/\//)) {
      strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1:///');
    } else {
      strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1://');
    }

    for (var i = 0; i < strArray.length; i++) {
      var component = strArray[i];

      if (typeof component !== 'string') {
        throw new TypeError('Url must be a string. Received ' + component);
      }

      if (component === '') {
        continue;
      }

      if (i > 0) {
        // Removing the starting slashes for each component but the first.
        component = component.replace(/^[\/]+/, '');
      }

      if (i < strArray.length - 1) {
        // Removing the ending slashes for each component but the last.
        component = component.replace(/[\/]+$/, '');
      } else {
        // For the last component we will combine multiple slashes to a single one.
        component = component.replace(/[\/]+$/, '/');
      }

      resultArray.push(component);
    }

    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.
    // remove trailing slash before parameters or hash

    str = str.replace(/\/(\?|&|#[^!])/g, '$1'); // replace ? in parameters with &

    var parts = str.split('?');
    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');
    return str;
  }

  return function () {
    var input;

    if ((0, _typeof2.default)(arguments[0]) === 'object') {
      input = arguments[0];
    } else {
      input = [].slice.call(arguments);
    }

    return normalize(input);
  };
});

},{"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11}],34:[function(require,module,exports){
(function (global){
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var required = require('requires-port'),
    qs = require('querystringify'),
    slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//,
    protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,
    whitespace = "[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]",
    left = new RegExp('^' + whitespace + '+');
/**
 * Trim a given string.
 *
 * @param {String} str String to trim.
 * @public
 */


function trimLeft(str) {
  return (str ? str : '').toString().replace(left, '');
}
/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */


var rules = [['#', 'hash'], // Extract from the back.
['?', 'query'], // Extract from the back.
function sanitize(address) {
  // Sanitize what is left of the address
  return address.replace('\\', '/');
}, ['/', 'pathname'], // Extract from the back.
['@', 'auth', 1], // Extract from the front.
[NaN, 'host', undefined, 1, 1], // Set left over value.
[/:(\d+)$/, 'port', undefined, 1], // RegExp the back.
[NaN, 'hostname', undefined, 1, 1] // Set left over.
];
/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */

var ignore = {
  hash: 1,
  query: 1
};
/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */

function lolcation(loc) {
  var globalVar;
  if (typeof window !== 'undefined') globalVar = window;else if (typeof global !== 'undefined') globalVar = global;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};
  var location = globalVar.location || {};
  loc = loc || location;
  var finaldestination = {},
      type = (0, _typeof2.default)(loc),
      key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});

    for (key in ignore) {
      delete finaldestination[key];
    }
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}
/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @private
 */


function extractProtocol(address) {
  address = trimLeft(address);
  var match = protocolre.exec(address);
  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}
/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */


function resolve(relative, base) {
  if (relative === '') return base;
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),
      i = path.length,
      last = path[i - 1],
      unshift = false,
      up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');
  return path.join('/');
}
/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} [location] Location defaults for relative paths.
 * @param {Boolean|Function} [parser] Parser for the query string.
 * @private
 */


function Url(address, location, parser) {
  address = trimLeft(address);

  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  var relative,
      extracted,
      parse,
      instruction,
      index,
      key,
      instructions = rules.slice(),
      type = (0, _typeof2.default)(location),
      url = this,
      i = 0; //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //

  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;
  location = lolcation(location); //
  // Extract protocol information before running the instructions.
  //

  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest; //
  // When the authority component is absent the URL starts with a path
  // component.
  //

  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if (index = parse.exec(address)) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : ''); //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //

    if (instruction[4]) url[key] = url[key].toLowerCase();
  } //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //


  if (parser) url.query = parser(url.query); //
  // If the URL is relative, resolve the pathname against the base URL.
  //

  if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
    url.pathname = resolve(url.pathname, location.pathname);
  } //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //


  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  } //
  // Parse down the `auth` for the username and password.
  //


  url.username = url.password = '';

  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null'; //
  // The href is just the compiled result.
  //

  url.href = url.toString();
}
/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */


function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname + ':' + value;
      }

      break;

    case 'hostname':
      url[part] = value;
      if (url.port) value += ':' + url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }

      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];
    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
  url.href = url.toString();
  return url;
}
/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */


function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
  var query,
      url = this,
      protocol = url.protocol;
  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':' + url.password;
    result += '@';
  }

  result += url.host + url.pathname;
  query = 'object' === (0, _typeof2.default)(url.query) ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
  if (url.hash) result += url.hash;
  return result;
}

Url.prototype = {
  set: set,
  toString: toString
}; //
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//

Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.trimLeft = trimLeft;
Url.qs = qs;
module.exports = Url;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11,"querystringify":30,"requires-port":32}],35:[function(require,module,exports){
(function (Buffer){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var URL = require('url-parse');

var caseless = require('caseless');

var debug = require('debug')('frisbee');

var qs = require('qs');

var urlJoin = require('url-join');

var _require = require('boolean'),
    boolean = _require.boolean; // eslint-disable-next-line import/no-unassigned-import


require('cross-fetch/polyfill'); // eslint-disable-next-line import/no-unassigned-import


require('abortcontroller-polyfill/dist/polyfill-patch-fetch');

var Interceptor = require('./interceptor');

var METHODS = ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'];
var MODES = ['no-cors', 'cors', 'same-origin'];
var CACHE = ['default', 'no-cache', 'reload', 'force-cache', 'only-if-cached'];
var CREDENTIALS = ['include', 'same-origin', 'omit'];
var REDIRECT = ['manual', 'follow', 'error'];
var REFERRER = ['no-referrer', 'client'];
var respProperties = {
  readOnly: ['headers', 'ok', 'redirected', 'status', 'statusText', 'type', 'url', 'bodyUsed'],
  writable: ['useFinalURL'],
  callable: ['clone', 'error', 'redirect', 'arrayBuffer', 'blob', 'formData', 'json', 'text']
};

function createFrisbeeResponse(origResp) {
  var resp = {
    originalResponse: origResp
  };
  respProperties.readOnly.forEach(function (prop) {
    return Object.defineProperty(resp, prop, {
      value: origResp[prop]
    });
  });
  respProperties.writable.forEach(function (prop) {
    return Object.defineProperty(resp, prop, {
      get: function get() {
        return origResp[prop];
      },
      set: function set(value) {
        origResp[prop] = value;
      }
    });
  });
  var callable = null;
  respProperties.callable.forEach(function (prop) {
    Object.defineProperty(resp, prop, {
      value: (callable = origResp[prop], typeof callable === 'function' && callable.bind(origResp))
    });
  });
  var headersObj = {};
  origResp.headers.forEach(function (pair) {
    headersObj[pair[0]] = pair[1];
  });
  Object.defineProperty(resp, 'headersObj', {
    value: headersObj
  });
  return resp;
}

var Frisbee = /*#__PURE__*/function () {
  function Frisbee() {
    var _this = this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, Frisbee);
    this.opts = _objectSpread({
      preventBodyOnMethods: ['GET', 'HEAD', 'DELETE', 'CONNECT'],
      interceptableMethods: METHODS,
      mode: 'same-origin',
      cache: 'default',
      credentials: 'same-origin',
      redirect: 'follow',
      referrer: 'client',
      body: null,
      params: null,
      logRequest: false,
      logResponse: false,
      parse: {
        ignoreQueryPrefix: true
      },
      stringify: {
        addQueryPrefix: true,
        format: 'RFC1738',
        arrayFormat: 'indices'
      }
    }, opts);
    var localAbortController;
    Object.defineProperty(this, 'abortController', {
      enumerable: false,
      get: function get() {
        if (!localAbortController) {
          localAbortController = new AbortController();
          localAbortController.signal.addEventListener('abort', function () {
            // when this is aborted, null out the localAbortController
            // so we'll create a new one next time we need it
            localAbortController = null;
          });
        }

        return localAbortController;
      }
    });
    var localAbortTokenMap = new Map();
    Object.defineProperty(this, 'abortTokenMap', {
      enumerable: false,
      get: function get() {
        return localAbortTokenMap;
      }
    });
    Object.defineProperty(this, 'parseErr', {
      enumerable: false,
      value: opts.parseErr || new Error("Invalid JSON received".concat(this.opts.baseURI ? " from ".concat(this.opts.baseURI) : ''))
    });

    if (opts.arrayFormat) {
      this.opts.parse.arrayFormat = 'indices';
      delete opts.arrayFormat;
    }

    if (Array.isArray(opts.preventBodyOnMethods)) this.opts.preventBodyOnMethods = this.opts.preventBodyOnMethods.map(function (method) {
      return method.toUpperCase().trim();
    });
    this.opts.raw = boolean(this.opts.raw);
    if (this.opts.auth) this.auth(this.opts.auth);
    METHODS.forEach(function (method) {
      _this[method.toLowerCase()] = _this._setup(method.toLowerCase());
    }); // alias for `this.del` -> `this.delete`

    this.del = this._setup('delete'); // interceptor should be initialized after methods setup

    this.interceptor = new Interceptor(this, this.opts.interceptableMethods); // bind scope to method

    this.setOptions = this.setOptions.bind(this);
    this.auth = this.auth.bind(this);
    this.jwt = this.jwt.bind(this);
    this.abort = this.abort.bind(this);
    this.abortAll = this.abortAll.bind(this);
    this._request = this._request.bind(this);
    this._parseJSON = this._parseJSON.bind(this);
    this._fetch = this._fetch.bind(this);
  }

  (0, _createClass2.default)(Frisbee, [{
    key: "setOptions",
    value: function setOptions(opts) {
      this.opts = _objectSpread(_objectSpread({}, this.opts), opts);
      return this.opts;
    }
  }, {
    key: "abort",
    value: function abort(token) {
      var mapValue = this.abortTokenMap.get(token);

      if (mapValue && mapValue.abortController) {
        mapValue.abortController.abort();
      }
    }
  }, {
    key: "abortAll",
    value: function abortAll() {
      this.abortController.abort();
    }
  }, {
    key: "_setup",
    value: function _setup(method) {
      var _this2 = this;

      return function () {
        var originalPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';
        var originalOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if (originalOptions && (0, _typeof2.default)(originalOptions) === 'object') {
          var abortController;

          if (originalOptions.abortToken) {
            // allow to use a single token to cancel multiple requests
            var mapValue = _this2.abortTokenMap.get(originalOptions.abortToken);

            if (!mapValue) {
              mapValue = {
                abortController: new AbortController(),
                count: 0
              };
            }

            mapValue.count++;

            _this2.abortTokenMap.set(originalOptions.abortToken, mapValue);

            abortController = mapValue.abortController;
          } else {
            abortController = new AbortController();
          } // the user has defined their own signal we won't use it directly, but we'll listen to it


          if (originalOptions.signal) {
            originalOptions.signal.addEventListener('abort', function () {
              return abortController.abort();
            });
          } // abort this request whenever this.abortController.abort() gets called - a.k.a. - abortAll()


          _this2.abortController.signal.addEventListener('abort', function () {
            return abortController.abort();
          });

          originalOptions.signal = abortController.signal;
        } // these can't change with interceptors, otherwise we're in weird behaviour land


        var signal = originalOptions.signal,
            abortToken = originalOptions.abortToken;
        return _this2._request({
          method: method,
          originalPath: originalPath,
          originalOptions: originalOptions,
          signal: signal,
          abortToken: abortToken
        });
      };
    }
  }, {
    key: "_request",
    value: function _request(_ref) {
      var _this3 = this;

      var method = _ref.method,
          originalPath = _ref.originalPath,
          originalOptions = _ref.originalOptions,
          signal = _ref.signal,
          abortToken = _ref.abortToken;
      return /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        var path,
            options,
            opts,
            c,
            url,
            href,
            query,
            preventBodyOnMethods,
            querystring,
            response,
            error,
            mapValue,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                path = _args.length > 0 && _args[0] !== undefined ? _args[0] : originalPath;
                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : originalOptions;
                debug('frisbee', method, path, options); // path must be string

                if (!(typeof path !== 'string')) {
                  _context.next = 5;
                  break;
                }

                throw new TypeError('`path` must be a string');

              case 5:
                if (!((0, _typeof2.default)(options) !== 'object' || Array.isArray(options))) {
                  _context.next = 7;
                  break;
                }

                throw new TypeError('`options` must be an object');

              case 7:
                if (!(options.abortToken !== abortToken)) {
                  _context.next = 9;
                  break;
                }

                throw new Error('abortToken cannot be modified via an interceptor');

              case 9:
                if (!(options.signal !== signal)) {
                  _context.next = 11;
                  break;
                }

                throw new Error('signal cannot be modified via an interceptor');

              case 11:
                opts = {
                  method: method === 'del' ? 'DELETE' : method.toUpperCase(),
                  mode: options.mode || _this3.opts.mode,
                  cache: options.cache || _this3.opts.cache,
                  credentials: options.credentials || _this3.opts.credentials,
                  headers: _objectSpread(_objectSpread({}, _this3.opts.headers), options.headers),
                  redirect: options.redirect || _this3.opts.redirect,
                  referrer: options.referrer || _this3.opts.referrer,
                  signal: signal
                };
                if (_this3.opts.body || options.body) opts.body = options.body ? options.body : _this3.opts.body;
                if (_this3.opts.params || options.params) opts.params = _objectSpread(_objectSpread({}, _this3.opts.params), options.params); // remove any nil or blank headers
                // (e.g. to automatically set Content-Type with `FormData` boundary)

                Object.keys(opts.headers).forEach(function (key) {
                  if (typeof opts.headers[key] === 'undefined' || opts.headers[key] === null || opts.headers[key] === '') delete opts.headers[key];
                });
                c = caseless(opts.headers); // parse the path so that we can support
                // mixed params in body and in url path
                // e.g. `api.get('/v1/users?search=nifty`
                // = /v1/users?search=nifty
                // e.g. `api.get('/v1/users?search=nifty', { foo: 'bar' });
                // = /v1/users?search=nifty&foo=bar

                url = new URL(path, {}, false);
                href = url.origin === 'null' ? _this3.opts.baseURI ? urlJoin(_this3.opts.baseURI, url.pathname) : url.pathname : "".concat(url.origin).concat(url.pathname);
                query = qs.parse(url.query, options.parse || _this3.opts.parse); // allow params to be passed

                if (options.params || _this3.opts.params) query = _objectSpread(_objectSpread(_objectSpread({}, _this3.opts.params), options.params), query); // in order to support Android POST requests
                // we must allow an empty body to be sent
                // https://github.com/facebook/react-native/issues/4890

                if (!(typeof opts.body === 'undefined' && opts.method === 'POST')) {
                  _context.next = 24;
                  break;
                }

                opts.body = '';
                _context.next = 40;
                break;

              case 24:
                if (!((0, _typeof2.default)(opts.body) === 'object')) {
                  _context.next = 40;
                  break;
                }

                //
                // according to RFC7231, `GET`, `HEAD`, `DELETE`, and `CONNECT`:
                //
                // > A payload within a $METHOD request message has no defined semantics;
                // > sending a payload body on a $METHOD request might cause some existing
                // > implementations to reject the request.
                //
                // <https://tools.ietf.org/html/rfc7231>
                //
                preventBodyOnMethods = options.preventBodyOnMethods || _this3.opts.preventBodyOnMethods;
                debug('preventBodyOnMethods', preventBodyOnMethods);

                if (!(Array.isArray(preventBodyOnMethods) && preventBodyOnMethods.includes(opts.method))) {
                  _context.next = 32;
                  break;
                }

                query = _objectSpread(_objectSpread({}, opts.body), query);
                delete opts.body;
                _context.next = 40;
                break;

              case 32:
                if (!(c.get('Content-Type') && c.get('Content-Type').split(';')[0] === 'application/json')) {
                  _context.next = 40;
                  break;
                }

                _context.prev = 33;
                opts.body = JSON.stringify(opts.body);
                _context.next = 40;
                break;

              case 37:
                _context.prev = 37;
                _context.t0 = _context["catch"](33);
                throw _context.t0;

              case 40:
                querystring = qs.stringify(query, options.stringify || _this3.opts.stringify);
                _context.prev = 41;
                _context.next = 44;
                return _this3._fetch(href + querystring, opts, typeof options.raw === 'boolean' ? options.raw : _this3.opts.raw);

              case 44:
                response = _context.sent;
                _context.next = 50;
                break;

              case 47:
                _context.prev = 47;
                _context.t1 = _context["catch"](41);
                error = _context.t1;

              case 50:
                // update the abortTokenMap
                mapValue = _this3.abortTokenMap.get(options.abortToken);

                if (mapValue) {
                  if (mapValue.count - 1 === 0) {
                    _this3.abortTokenMap.delete(options.abortToken);
                  } else {
                    _this3.abortTokenMap.set(options.abortToken, _objectSpread(_objectSpread({}, mapValue), {}, {
                      count: --mapValue.count
                    }));
                  }
                }

                if (!error) {
                  _context.next = 54;
                  break;
                }

                throw error;

              case 54:
                return _context.abrupt("return", response);

              case 55:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[33, 37], [41, 47]]);
      }));
    }
  }, {
    key: "_parseJSON",
    value: function () {
      var _parseJSON2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(res) {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;

                if (!(typeof res.json === 'function')) {
                  _context2.next = 7;
                  break;
                }

                _context2.next = 4;
                return res.json();

              case 4:
                res.body = _context2.sent;
                _context2.next = 11;
                break;

              case 7:
                _context2.next = 9;
                return res.text();

              case 9:
                res.body = _context2.sent;
                res.body = JSON.parse(res.body);

              case 11:
                // attempt to use better and human-friendly error messages
                if ((0, _typeof2.default)(res.body) === 'object' && typeof res.body.message === 'string') {
                  res.err = new Error(res.body.message);
                } else if (!Array.isArray(res.body) && // attempt to utilize Stripe-inspired error messages
                (0, _typeof2.default)(res.body.error) === 'object') {
                  if (res.body.error.message) res.err = new Error(res.body.error.message);
                  if (res.body.error.stack) res.err.stack = res.body.error.stack;
                  if (res.body.error.code) res.err.code = res.body.error.code;
                  if (res.body.error.param) res.err.param = res.body.error.param;
                }

                _context2.next = 17;
                break;

              case 14:
                _context2.prev = 14;
                _context2.t0 = _context2["catch"](0);
                res.err = this.parseErr || _context2.t0;

              case 17:
                return _context2.abrupt("return", res);

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 14]]);
      }));

      function _parseJSON(_x) {
        return _parseJSON2.apply(this, arguments);
      }

      return _parseJSON;
    }()
  }, {
    key: "_fetch",
    value: function () {
      var _fetch2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(path, opts, raw) {
        var originalRes, res, contentType;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                debug('fetch', path, opts);
                debug('raw', raw); // <https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch>
                // mode - no-cors, cors, *same-origin
                // cache - *default, no-cache, reload, force-cache, only-if-cached
                // credentials - include, *same-origin, omit
                // redirect - manual, follow*, error
                // referrer - no-referrer, *client

                if (METHODS.includes(opts.method)) {
                  _context3.next = 4;
                  break;
                }

                throw new Error("Invalid \"method\" of \"".concat(opts.method, "\", must be one of: ").concat(METHODS.join(', ')));

              case 4:
                if (MODES.includes(opts.mode)) {
                  _context3.next = 6;
                  break;
                }

                throw new Error("Invalid \"mode\" of \"".concat(opts.mode, "\", must be one of: ").concat(MODES.join(', ')));

              case 6:
                if (CACHE.includes(opts.cache)) {
                  _context3.next = 8;
                  break;
                }

                throw new Error("Invalid \"cache\" of \"".concat(opts.cache, "\", must be one of: ").concat(CACHE.join(', ')));

              case 8:
                if (CREDENTIALS.includes(opts.credentials)) {
                  _context3.next = 10;
                  break;
                }

                throw new Error("Invalid \"credentials\" of \"".concat(opts.credentials, "\", must be one of: ").concat(CREDENTIALS.join(', ')));

              case 10:
                if (REDIRECT.includes(opts.redirect)) {
                  _context3.next = 12;
                  break;
                }

                throw new Error("Invalid \"redirect\" of \"".concat(opts.redirect, "\", must be one of: ").concat(REDIRECT.join(', ')));

              case 12:
                if (REFERRER.includes(opts.referrer)) {
                  _context3.next = 14;
                  break;
                }

                throw new Error("Invalid \"referrer\" of \"".concat(opts.referrer, "\", must be one of: ").concat(REFERRER.join(', ')));

              case 14:
                if (typeof this.opts.logRequest === 'function') this.opts.logRequest(path, opts);
                _context3.next = 17;
                return fetch(path, opts);

              case 17:
                originalRes = _context3.sent;
                if (typeof this.opts.logResponse === 'function') this.opts.logResponse(path, opts, originalRes);
                res = createFrisbeeResponse(originalRes);
                contentType = res.headers.get('Content-Type');

                if (!res.ok) {
                  _context3.next = 49;
                  break;
                }

                if (!raw) {
                  _context3.next = 24;
                  break;
                }

                return _context3.abrupt("return", res.originalResponse);

              case 24:
                if (!(contentType && contentType.includes('application/json'))) {
                  _context3.next = 45;
                  break;
                }

                _context3.prev = 25;

                if (!(typeof res.json === 'function')) {
                  _context3.next = 32;
                  break;
                }

                _context3.next = 29;
                return res.json();

              case 29:
                res.body = _context3.sent;
                _context3.next = 36;
                break;

              case 32:
                _context3.next = 34;
                return res.text();

              case 34:
                res.body = _context3.sent;
                res.body = JSON.parse(res.body);

              case 36:
                _context3.next = 43;
                break;

              case 38:
                _context3.prev = 38;
                _context3.t0 = _context3["catch"](25);

                if (!(contentType === 'application/json')) {
                  _context3.next = 43;
                  break;
                }

                res.err = this.parseErr || _context3.t0;
                return _context3.abrupt("return", res);

              case 43:
                _context3.next = 48;
                break;

              case 45:
                _context3.next = 47;
                return res.text();

              case 47:
                res.body = _context3.sent;

              case 48:
                return _context3.abrupt("return", res);

              case 49:
                res.err = new Error(res.statusText); // check if the response was JSON, and if so, better the error
                // (return early if it's not)

                if (!(!contentType || !contentType.includes('application/json'))) {
                  _context3.next = 52;
                  break;
                }

                return _context3.abrupt("return", res);

              case 52:
                return _context3.abrupt("return", this._parseJSON(res));

              case 53:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[25, 38]]);
      }));

      function _fetch(_x2, _x3, _x4) {
        return _fetch2.apply(this, arguments);
      }

      return _fetch;
    }()
  }, {
    key: "auth",
    value: function auth(creds) {
      if (typeof creds === 'string') {
        var index = creds.indexOf(':');
        if (index !== -1) creds = [creds.slice(0, index), creds.slice(index + 1)];
      }

      if (!Array.isArray(creds)) {
        // eslint-disable-next-line prefer-rest-params
        creds = [].slice.call(arguments);
      }

      switch (creds.length) {
        case 0:
          creds = ['', ''];
          break;

        case 1:
          creds.push('');
          break;

        case 2:
          break;

        default:
          throw new Error('auth option can only have two keys `[user, pass]`');
      }

      if (typeof creds[0] !== 'string') throw new TypeError('auth option `user` must be a string');
      if (typeof creds[1] !== 'string') throw new TypeError('auth option `pass` must be a string');

      if (!creds[0] && !creds[1]) {
        delete this.opts.headers.Authorization;
      } else {
        this.opts.headers.Authorization = "Basic ".concat(Buffer.from(creds.join(':')).toString('base64'));
      }

      return this;
    }
  }, {
    key: "jwt",
    value: function jwt(token) {
      if (token === null || token === undefined) delete this.opts.headers.Authorization;else if (typeof token === 'string') this.opts.headers.Authorization = "Bearer ".concat(token);else throw new TypeError('jwt token must be a string');
      return this;
    }
  }]);
  return Frisbee;
}();

module.exports = Frisbee;

}).call(this,require("buffer").Buffer)

},{"./interceptor":36,"@babel/runtime/helpers/asyncToGenerator":3,"@babel/runtime/helpers/classCallCheck":4,"@babel/runtime/helpers/createClass":5,"@babel/runtime/helpers/defineProperty":6,"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/typeof":11,"@babel/runtime/regenerator":13,"abortcontroller-polyfill/dist/polyfill-patch-fetch":14,"boolean":16,"buffer":17,"caseless":18,"cross-fetch/polyfill":19,"debug":20,"qs":26,"url-join":33,"url-parse":34}],36:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

module.exports = /*#__PURE__*/function () {
  function Interceptor(API) {
    var _this = this;

    var interceptableMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    (0, _classCallCheck2.default)(this, Interceptor);
    this.interceptors = [];
    if (!API) throw new Error('API should be passed to the Interceptor');
    if (interceptableMethods.length === 0) throw new Error('no methods were added to interceptableMethods');
    interceptableMethods = interceptableMethods.map(function (method) {
      return method.toLowerCase();
    });
    if (interceptableMethods.includes('delete') && !interceptableMethods.includes('del')) interceptableMethods.push('del');
    if (interceptableMethods.includes('del') && !interceptableMethods.includes('delete')) interceptableMethods.push('delete');
    interceptableMethods.forEach(function (methodName) {
      var methodFn = API[methodName.toLowerCase()];

      API[methodName.toLowerCase()] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _this.interceptedMethod.apply(_this, [methodFn.apply(void 0, args)].concat(args));
      };
    });
  }
  /* eslint-disable promise/prefer-await-to-then */


  (0, _createClass2.default)(Interceptor, [{
    key: "interceptedMethod",
    value: function interceptedMethod(methodFn) {
      var interceptors = this.interceptors;
      var reversedInterceptors = interceptors.slice().reverse();

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var promise = Promise.resolve(args); // Register request interceptors

      interceptors.forEach(function (_ref) {
        var request = _ref.request,
            requestError = _ref.requestError;
        if (typeof request === 'function') promise = promise.then(function (args) {
          return request.apply(void 0, (0, _toConsumableArray2.default)([].concat(args)));
        });
        if (typeof requestError === 'function') promise = promise.catch(requestError);
      }); // Register methodFn call

      if (typeof methodFn === 'function') promise = promise.then(function (args) {
        return methodFn.apply(void 0, (0, _toConsumableArray2.default)([].concat(args)));
      }); // Register response interceptors

      reversedInterceptors.forEach(function (_ref2) {
        var response = _ref2.response,
            responseError = _ref2.responseError;
        if (typeof response === 'function') promise = promise.then(response);
        if (typeof responseError === 'function') promise = promise.catch(responseError);
      });
      return promise;
    }
    /* eslint-enable promise/prefer-await-to-then */

  }, {
    key: "register",
    value: function register(interceptor) {
      var _this2 = this;

      this.interceptors.push(interceptor);
      return function () {
        return _this2.unregister(interceptor);
      };
    }
  }, {
    key: "unregister",
    value: function unregister(interceptor) {
      var index = this.interceptors.indexOf(interceptor);
      if (index >= 0) this.interceptors.splice(index, 1);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.interceptors = [];
    }
  }]);
  return Interceptor;
}();

},{"@babel/runtime/helpers/classCallCheck":4,"@babel/runtime/helpers/createClass":5,"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/toConsumableArray":10}]},{},[35])(35)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5LmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L3BvbHlmaWxsLXBhdGNoLWZldGNoLmpzIiwibm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9ib29sZWFuL2J1aWxkL2xpYi9ib29sZWFuLmpzIiwibm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jYXNlbGVzcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jcm9zcy1mZXRjaC9kaXN0L2Jyb3dzZXItcG9seWZpbGwuanMiLCJub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIm5vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9xcy9saWIvZm9ybWF0cy5qcyIsIm5vZGVfbW9kdWxlcy9xcy9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcXMvbGliL3BhcnNlLmpzIiwibm9kZV9tb2R1bGVzL3FzL2xpYi9zdHJpbmdpZnkuanMiLCJub2RlX21vZHVsZXMvcXMvbGliL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5naWZ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIm5vZGVfbW9kdWxlcy9yZXF1aXJlcy1wb3J0L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3VybC1qb2luL2xpYi91cmwtam9pbi5qcyIsIm5vZGVfbW9kdWxlcy91cmwtcGFyc2UvaW5kZXguanMiLCJzcmMvaW5kZXguanMiLCJzcmMvaW50ZXJjZXB0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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Q0FBZDtBQUNBLFVBQUksS0FBSyxJQUFJLENBQWIsRUFBZ0IsS0FBSyxZQUFMLENBQWtCLE1BQWxCLENBQXlCLEtBQXpCLEVBQWdDLENBQWhDO0FBQ2pCO0FBdEVIO0FBQUE7QUFBQSw0QkF3RVU7QUFDTixXQUFLLFlBQUwsR0FBb0IsRUFBcEI7QUFDRDtBQTFFSDtBQUFBO0FBQUEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5TGlrZVRvQXJyYXk7IiwidmFyIGFycmF5TGlrZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9hcnJheUxpa2VUb0FycmF5XCIpO1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwiZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVTcHJlYWQ7IiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSA9IHJlcXVpcmUoXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJ2YXIgYXJyYXlMaWtlVG9BcnJheSA9IHJlcXVpcmUoXCIuL2FycmF5TGlrZVRvQXJyYXlcIik7XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgZmFjdG9yeSgpO1xufSgoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgICB9O1xuICAgIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH1cblxuICBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgICAgby5fX3Byb3RvX18gPSBwO1xuICAgICAgcmV0dXJuIG87XG4gICAgfTtcblxuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG4gIH1cblxuICBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICByZXR1cm4gY2FsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgICBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkge1xuICAgICAgX2dldCA9IFJlZmxlY3QuZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgICAgICB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpO1xuICB9XG5cbiAgdmFyIEVtaXR0ZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbWl0dGVyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVtaXR0ZXIpO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2xpc3RlbmVycycsIHtcbiAgICAgICAgdmFsdWU6IHt9LFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRW1pdHRlciwgW3tcbiAgICAgIGtleTogXCJhZGRFdmVudExpc3RlbmVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoISh0eXBlIGluIHRoaXMubGlzdGVuZXJzKSkge1xuICAgICAgICAgIHRoaXMubGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCEodHlwZSBpbiB0aGlzLmxpc3RlbmVycykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmxpc3RlbmVyc1t0eXBlXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHN0YWNrLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmIChzdGFja1tpXSA9PT0gY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHN0YWNrLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGlzcGF0Y2hFdmVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoIShldmVudC50eXBlIGluIHRoaXMubGlzdGVuZXJzKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWJvdW5jZSA9IGZ1bmN0aW9uIGRlYm91bmNlKGNhbGxiYWNrKSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChfdGhpcywgZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBzdGFjayA9IHRoaXMubGlzdGVuZXJzW2V2ZW50LnR5cGVdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gc3RhY2subGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgZGVib3VuY2Uoc3RhY2tbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICFldmVudC5kZWZhdWx0UHJldmVudGVkO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBFbWl0dGVyO1xuICB9KCk7XG5cbiAgdmFyIEFib3J0U2lnbmFsID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0VtaXR0ZXIpIHtcbiAgICBfaW5oZXJpdHMoQWJvcnRTaWduYWwsIF9FbWl0dGVyKTtcblxuICAgIGZ1bmN0aW9uIEFib3J0U2lnbmFsKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFib3J0U2lnbmFsKTtcblxuICAgICAgX3RoaXMyID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFib3J0U2lnbmFsKS5jYWxsKHRoaXMpKTsgLy8gU29tZSB2ZXJzaW9ucyBvZiBiYWJlbCBkb2VzIG5vdCB0cmFuc3BpbGUgc3VwZXIoKSBjb3JyZWN0bHkgZm9yIElFIDw9IDEwLCBpZiB0aGUgcGFyZW50XG4gICAgICAvLyBjb25zdHJ1Y3RvciBoYXMgZmFpbGVkIHRvIHJ1biwgdGhlbiBcInRoaXMubGlzdGVuZXJzXCIgd2lsbCBzdGlsbCBiZSB1bmRlZmluZWQgYW5kIHRoZW4gd2UgY2FsbFxuICAgICAgLy8gdGhlIHBhcmVudCBjb25zdHJ1Y3RvciBkaXJlY3RseSBpbnN0ZWFkIGFzIGEgd29ya2Fyb3VuZC4gRm9yIGdlbmVyYWwgZGV0YWlscywgc2VlIGJhYmVsIGJ1ZzpcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbC9pc3N1ZXMvMzA0MVxuICAgICAgLy8gVGhpcyBoYWNrIHdhcyBhZGRlZCBhcyBhIGZpeCBmb3IgdGhlIGlzc3VlIGRlc2NyaWJlZCBoZXJlOlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0ZpbmFuY2lhbC1UaW1lcy9wb2x5ZmlsbC1saWJyYXJ5L3B1bGwvNTkjaXNzdWVjb21tZW50LTQ3NzU1ODA0MlxuXG4gICAgICBpZiAoIV90aGlzMi5saXN0ZW5lcnMpIHtcbiAgICAgICAgRW1pdHRlci5jYWxsKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMyKSk7XG4gICAgICB9IC8vIENvbXBhcmVkIHRvIGFzc2lnbm1lbnQsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBtYWtlcyBwcm9wZXJ0aWVzIG5vbi1lbnVtZXJhYmxlIGJ5IGRlZmF1bHQgYW5kXG4gICAgICAvLyB3ZSB3YW50IE9iamVjdC5rZXlzKG5ldyBBYm9ydENvbnRyb2xsZXIoKS5zaWduYWwpIHRvIGJlIFtdIGZvciBjb21wYXQgd2l0aCB0aGUgbmF0aXZlIGltcGxcblxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczIpLCAnYWJvcnRlZCcsIHtcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzMiksICdvbmFib3J0Jywge1xuICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhBYm9ydFNpZ25hbCwgW3tcbiAgICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJ1tvYmplY3QgQWJvcnRTaWduYWxdJztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGlzcGF0Y2hFdmVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdhYm9ydCcpIHtcbiAgICAgICAgICB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uYWJvcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMub25hYm9ydC5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihBYm9ydFNpZ25hbC5wcm90b3R5cGUpLCBcImRpc3BhdGNoRXZlbnRcIiwgdGhpcykuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIEFib3J0U2lnbmFsO1xuICB9KEVtaXR0ZXIpO1xuICB2YXIgQWJvcnRDb250cm9sbGVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWJvcnRDb250cm9sbGVyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFib3J0Q29udHJvbGxlcik7XG5cbiAgICAgIC8vIENvbXBhcmVkIHRvIGFzc2lnbm1lbnQsIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBtYWtlcyBwcm9wZXJ0aWVzIG5vbi1lbnVtZXJhYmxlIGJ5IGRlZmF1bHQgYW5kXG4gICAgICAvLyB3ZSB3YW50IE9iamVjdC5rZXlzKG5ldyBBYm9ydENvbnRyb2xsZXIoKSkgdG8gYmUgW10gZm9yIGNvbXBhdCB3aXRoIHRoZSBuYXRpdmUgaW1wbFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzaWduYWwnLCB7XG4gICAgICAgIHZhbHVlOiBuZXcgQWJvcnRTaWduYWwoKSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEFib3J0Q29udHJvbGxlciwgW3tcbiAgICAgIGtleTogXCJhYm9ydFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0KCkge1xuICAgICAgICB2YXIgZXZlbnQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBldmVudCA9IG5ldyBFdmVudCgnYWJvcnQnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgICAgICAgIC8vIEZvciBJbnRlcm5ldCBFeHBsb3JlciA4OlxuICAgICAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gICAgICAgICAgICAgIGV2ZW50LnR5cGUgPSAnYWJvcnQnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gRm9yIEludGVybmV0IEV4cGxvcmVyIDExOlxuICAgICAgICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICAgICAgICBldmVudC5pbml0RXZlbnQoJ2Fib3J0JywgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2sgd2hlcmUgZG9jdW1lbnQgaXNuJ3QgYXZhaWxhYmxlOlxuICAgICAgICAgICAgZXZlbnQgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdhYm9ydCcsXG4gICAgICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNpZ25hbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9TdHJpbmdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICdbb2JqZWN0IEFib3J0Q29udHJvbGxlcl0nO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBYm9ydENvbnRyb2xsZXI7XG4gIH0oKTtcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gICAgLy8gVGhlc2UgYXJlIG5lY2Vzc2FyeSB0byBtYWtlIHN1cmUgdGhhdCB3ZSBnZXQgY29ycmVjdCBvdXRwdXQgZm9yOlxuICAgIC8vIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXcgQWJvcnRDb250cm9sbGVyKCkpXG4gICAgQWJvcnRDb250cm9sbGVyLnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddID0gJ0Fib3J0Q29udHJvbGxlcic7XG4gICAgQWJvcnRTaWduYWwucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnQWJvcnRTaWduYWwnO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seWZpbGxOZWVkZWQoc2VsZikge1xuICAgIGlmIChzZWxmLl9fRk9SQ0VfSU5TVEFMTF9BQk9SVENPTlRST0xMRVJfUE9MWUZJTEwpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdfX0ZPUkNFX0lOU1RBTExfQUJPUlRDT05UUk9MTEVSX1BPTFlGSUxMPXRydWUgaXMgc2V0LCB3aWxsIGZvcmNlIGluc3RhbGwgcG9seWZpbGwnKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gTm90ZSB0aGF0IHRoZSBcInVuZmV0Y2hcIiBtaW5pbWFsIGZldGNoIHBvbHlmaWxsIGRlZmluZXMgZmV0Y2goKSB3aXRob3V0XG4gICAgLy8gZGVmaW5pbmcgd2luZG93LlJlcXVlc3QsIGFuZCB0aGlzIHBvbHlmaWxsIG5lZWQgdG8gd29yayBvbiB0b3Agb2YgdW5mZXRjaFxuICAgIC8vIHNvIHRoZSBiZWxvdyBmZWF0dXJlIGRldGVjdGlvbiBuZWVkcyB0aGUgIXNlbGYuQWJvcnRDb250cm9sbGVyIHBhcnQuXG4gICAgLy8gVGhlIFJlcXVlc3QucHJvdG90eXBlIGNoZWNrIGlzIGFsc28gbmVlZGVkIGJlY2F1c2UgU2FmYXJpIHZlcnNpb25zIDExLjEuMlxuICAgIC8vIHVwIHRvIGFuZCBpbmNsdWRpbmcgMTIuMS54IGhhcyBhIHdpbmRvdy5BYm9ydENvbnRyb2xsZXIgcHJlc2VudCBidXQgc3RpbGxcbiAgICAvLyBkb2VzIE5PVCBjb3JyZWN0bHkgaW1wbGVtZW50IGFib3J0YWJsZSBmZXRjaDpcbiAgICAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTc0OTgwI2MyXG5cblxuICAgIHJldHVybiB0eXBlb2Ygc2VsZi5SZXF1ZXN0ID09PSAnZnVuY3Rpb24nICYmICFzZWxmLlJlcXVlc3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KCdzaWduYWwnKSB8fCAhc2VsZi5BYm9ydENvbnRyb2xsZXI7XG4gIH1cblxuICAvKipcbiAgICogTm90ZTogdGhlIFwiZmV0Y2guUmVxdWVzdFwiIGRlZmF1bHQgdmFsdWUgaXMgYXZhaWxhYmxlIGZvciBmZXRjaCBpbXBvcnRlZCBmcm9tXG4gICAqIHRoZSBcIm5vZGUtZmV0Y2hcIiBwYWNrYWdlIGFuZCBub3QgaW4gYnJvd3NlcnMuIFRoaXMgaXMgT0sgc2luY2UgYnJvd3NlcnNcbiAgICogd2lsbCBiZSBpbXBvcnRpbmcgdW1kLXBvbHlmaWxsLmpzIGZyb20gdGhhdCBwYXRoIFwic2VsZlwiIGlzIHBhc3NlZCB0aGVcbiAgICogZGVjb3JhdG9yIHNvIHRoZSBkZWZhdWx0IHZhbHVlIHdpbGwgbm90IGJlIHVzZWQgKGJlY2F1c2UgYnJvd3NlcnMgdGhhdCBkZWZpbmVcbiAgICogZmV0Y2ggYWxzbyBoYXMgUmVxdWVzdCkuIE9uZSBxdWlya3kgc2V0dXAgd2hlcmUgc2VsZi5mZXRjaCBleGlzdHMgYnV0XG4gICAqIHNlbGYuUmVxdWVzdCBkb2VzIG5vdCBpcyB3aGVuIHRoZSBcInVuZmV0Y2hcIiBtaW5pbWFsIGZldGNoIHBvbHlmaWxsIGlzIHVzZWRcbiAgICogb24gdG9wIG9mIElFMTE7IGZvciB0aGlzIGNhc2UgdGhlIGJyb3dzZXIgd2lsbCB0cnkgdG8gdXNlIHRoZSBmZXRjaC5SZXF1ZXN0XG4gICAqIGRlZmF1bHQgdmFsdWUgd2hpY2ggaW4gdHVybiB3aWxsIGJlIHVuZGVmaW5lZCBidXQgdGhlbiB0aGVuIFwiaWYgKFJlcXVlc3QpXCJcbiAgICogd2lsbCBlbnN1cmUgdGhhdCB5b3UgZ2V0IGEgcGF0Y2hlZCBmZXRjaCBidXQgc3RpbGwgbm8gUmVxdWVzdCAoYXMgZXhwZWN0ZWQpLlxuICAgKiBAcGFyYW0ge2ZldGNoLCBSZXF1ZXN0ID0gZmV0Y2guUmVxdWVzdH1cbiAgICogQHJldHVybnMge2ZldGNoOiBhYm9ydGFibGVGZXRjaCwgUmVxdWVzdDogQWJvcnRhYmxlUmVxdWVzdH1cbiAgICovXG5cbiAgZnVuY3Rpb24gYWJvcnRhYmxlRmV0Y2hEZWNvcmF0b3IocGF0Y2hUYXJnZXRzKSB7XG4gICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBwYXRjaFRhcmdldHMpIHtcbiAgICAgIHBhdGNoVGFyZ2V0cyA9IHtcbiAgICAgICAgZmV0Y2g6IHBhdGNoVGFyZ2V0c1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3BhdGNoVGFyZ2V0cyA9IHBhdGNoVGFyZ2V0cyxcbiAgICAgICAgZmV0Y2ggPSBfcGF0Y2hUYXJnZXRzLmZldGNoLFxuICAgICAgICBfcGF0Y2hUYXJnZXRzJFJlcXVlc3QgPSBfcGF0Y2hUYXJnZXRzLlJlcXVlc3QsXG4gICAgICAgIE5hdGl2ZVJlcXVlc3QgPSBfcGF0Y2hUYXJnZXRzJFJlcXVlc3QgPT09IHZvaWQgMCA/IGZldGNoLlJlcXVlc3QgOiBfcGF0Y2hUYXJnZXRzJFJlcXVlc3QsXG4gICAgICAgIE5hdGl2ZUFib3J0Q29udHJvbGxlciA9IF9wYXRjaFRhcmdldHMuQWJvcnRDb250cm9sbGVyLFxuICAgICAgICBfcGF0Y2hUYXJnZXRzJF9fRk9SQ0UgPSBfcGF0Y2hUYXJnZXRzLl9fRk9SQ0VfSU5TVEFMTF9BQk9SVENPTlRST0xMRVJfUE9MWUZJTEwsXG4gICAgICAgIF9fRk9SQ0VfSU5TVEFMTF9BQk9SVENPTlRST0xMRVJfUE9MWUZJTEwgPSBfcGF0Y2hUYXJnZXRzJF9fRk9SQ0UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3BhdGNoVGFyZ2V0cyRfX0ZPUkNFO1xuXG4gICAgaWYgKCFwb2x5ZmlsbE5lZWRlZCh7XG4gICAgICBmZXRjaDogZmV0Y2gsXG4gICAgICBSZXF1ZXN0OiBOYXRpdmVSZXF1ZXN0LFxuICAgICAgQWJvcnRDb250cm9sbGVyOiBOYXRpdmVBYm9ydENvbnRyb2xsZXIsXG4gICAgICBfX0ZPUkNFX0lOU1RBTExfQUJPUlRDT05UUk9MTEVSX1BPTFlGSUxMOiBfX0ZPUkNFX0lOU1RBTExfQUJPUlRDT05UUk9MTEVSX1BPTFlGSUxMXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZldGNoOiBmZXRjaCxcbiAgICAgICAgUmVxdWVzdDogUmVxdWVzdFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgUmVxdWVzdCA9IE5hdGl2ZVJlcXVlc3Q7IC8vIE5vdGUgdGhhdCB0aGUgXCJ1bmZldGNoXCIgbWluaW1hbCBmZXRjaCBwb2x5ZmlsbCBkZWZpbmVzIGZldGNoKCkgd2l0aG91dFxuICAgIC8vIGRlZmluaW5nIHdpbmRvdy5SZXF1ZXN0LCBhbmQgdGhpcyBwb2x5ZmlsbCBuZWVkIHRvIHdvcmsgb24gdG9wIG9mIHVuZmV0Y2hcbiAgICAvLyBoZW5jZSB3ZSBvbmx5IHBhdGNoIGl0IGlmIGl0J3MgYXZhaWxhYmxlLiBBbHNvIHdlIGRvbid0IHBhdGNoIGl0IGlmIHNpZ25hbFxuICAgIC8vIGlzIGFscmVhZHkgYXZhaWxhYmxlIG9uIHRoZSBSZXF1ZXN0IHByb3RvdHlwZSBiZWNhdXNlIGluIHRoaXMgY2FzZSBzdXBwb3J0XG4gICAgLy8gaXMgcHJlc2VudCBhbmQgdGhlIHBhdGNoaW5nIGJlbG93IGNhbiBjYXVzZSBhIGNyYXNoIHNpbmNlIGl0IGFzc2lnbnMgdG9cbiAgICAvLyByZXF1ZXN0LnNpZ25hbCB3aGljaCBpcyB0ZWNobmljYWxseSBhIHJlYWQtb25seSBwcm9wZXJ0eS4gVGhpcyBsYXR0ZXIgZXJyb3JcbiAgICAvLyBoYXBwZW5zIHdoZW4geW91IHJ1biB0aGUgbWFpbjUuanMgbm9kZS1mZXRjaCBleGFtcGxlIGluIHRoZSByZXBvXG4gICAgLy8gXCJhYm9ydGNvbnRyb2xsZXItcG9seWZpbGwtZXhhbXBsZXNcIi4gVGhlIGV4YWN0IGVycm9yIGlzOlxuICAgIC8vICAgcmVxdWVzdC5zaWduYWwgPSBpbml0LnNpZ25hbDtcbiAgICAvLyAgIF5cbiAgICAvLyBUeXBlRXJyb3I6IENhbm5vdCBzZXQgcHJvcGVydHkgc2lnbmFsIG9mICM8UmVxdWVzdD4gd2hpY2ggaGFzIG9ubHkgYSBnZXR0ZXJcblxuICAgIGlmIChSZXF1ZXN0ICYmICFSZXF1ZXN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnc2lnbmFsJykgfHwgX19GT1JDRV9JTlNUQUxMX0FCT1JUQ09OVFJPTExFUl9QT0xZRklMTCkge1xuICAgICAgUmVxdWVzdCA9IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIGluaXQpIHtcbiAgICAgICAgdmFyIHNpZ25hbDtcblxuICAgICAgICBpZiAoaW5pdCAmJiBpbml0LnNpZ25hbCkge1xuICAgICAgICAgIHNpZ25hbCA9IGluaXQuc2lnbmFsOyAvLyBOZXZlciBwYXNzIGluaXQuc2lnbmFsIHRvIHRoZSBuYXRpdmUgUmVxdWVzdCBpbXBsZW1lbnRhdGlvbiB3aGVuIHRoZSBwb2x5ZmlsbCBoYXNcbiAgICAgICAgICAvLyBiZWVuIGluc3RhbGxlZCBiZWNhdXNlIGlmIHdlJ3JlIHJ1bm5pbmcgb24gdG9wIG9mIGEgYnJvd3NlciB3aXRoIGFcbiAgICAgICAgICAvLyB3b3JraW5nIG5hdGl2ZSBBYm9ydENvbnRyb2xsZXIgKGkuZS4gdGhlIHBvbHlmaWxsIHdhcyBpbnN0YWxsZWQgZHVlIHRvXG4gICAgICAgICAgLy8gX19GT1JDRV9JTlNUQUxMX0FCT1JUQ09OVFJPTExFUl9QT0xZRklMTCBiZWluZyBzZXQpLCB0aGVuIHBhc3Npbmcgb3VyXG4gICAgICAgICAgLy8gZmFrZSBBYm9ydFNpZ25hbCB0byB0aGUgbmF0aXZlIGZldGNoIHdpbGwgdHJpZ2dlcjpcbiAgICAgICAgICAvLyBUeXBlRXJyb3I6IEZhaWxlZCB0byBjb25zdHJ1Y3QgJ1JlcXVlc3QnOiBtZW1iZXIgc2lnbmFsIGlzIG5vdCBvZiB0eXBlIEFib3J0U2lnbmFsLlxuXG4gICAgICAgICAgZGVsZXRlIGluaXQuc2lnbmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgTmF0aXZlUmVxdWVzdChpbnB1dCwgaW5pdCk7XG5cbiAgICAgICAgaWYgKHNpZ25hbCkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1ZXN0LCAnc2lnbmFsJywge1xuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogc2lnbmFsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgIH07XG5cbiAgICAgIFJlcXVlc3QucHJvdG90eXBlID0gTmF0aXZlUmVxdWVzdC5wcm90b3R5cGU7XG4gICAgfVxuXG4gICAgdmFyIHJlYWxGZXRjaCA9IGZldGNoO1xuXG4gICAgdmFyIGFib3J0YWJsZUZldGNoID0gZnVuY3Rpb24gYWJvcnRhYmxlRmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgICAgIHZhciBzaWduYWwgPSBSZXF1ZXN0ICYmIFJlcXVlc3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoaW5wdXQpID8gaW5wdXQuc2lnbmFsIDogaW5pdCA/IGluaXQuc2lnbmFsIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoc2lnbmFsKSB7XG4gICAgICAgIHZhciBhYm9ydEVycm9yO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYWJvcnRFcnJvciA9IG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvLyBJRSAxMSBkb2VzIG5vdCBzdXBwb3J0IGNhbGxpbmcgdGhlIERPTUV4Y2VwdGlvbiBjb25zdHJ1Y3RvciwgdXNlIGFcbiAgICAgICAgICAvLyByZWd1bGFyIGVycm9yIG9iamVjdCBvbiBpdCBpbnN0ZWFkLlxuICAgICAgICAgIGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoJ0Fib3J0ZWQnKTtcbiAgICAgICAgICBhYm9ydEVycm9yLm5hbWUgPSAnQWJvcnRFcnJvcic7XG4gICAgICAgIH0gLy8gUmV0dXJuIGVhcmx5IGlmIGFscmVhZHkgYWJvcnRlZCwgdGh1cyBhdm9pZGluZyBtYWtpbmcgYW4gSFRUUCByZXF1ZXN0XG5cblxuICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gICAgICAgIH0gLy8gVHVybiBhbiBldmVudCBpbnRvIGEgcHJvbWlzZSwgcmVqZWN0IGl0IG9uY2UgYGFib3J0YCBpcyBkaXNwYXRjaGVkXG5cblxuICAgICAgICB2YXIgY2FuY2VsbGF0aW9uID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xuICAgICAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoYWJvcnRFcnJvcik7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaW5pdCAmJiBpbml0LnNpZ25hbCkge1xuICAgICAgICAgIC8vIE5ldmVyIHBhc3MgLnNpZ25hbCB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uIHdoZW4gdGhlIHBvbHlmaWxsIGhhc1xuICAgICAgICAgIC8vIGJlZW4gaW5zdGFsbGVkIGJlY2F1c2UgaWYgd2UncmUgcnVubmluZyBvbiB0b3Agb2YgYSBicm93c2VyIHdpdGggYVxuICAgICAgICAgIC8vIHdvcmtpbmcgbmF0aXZlIEFib3J0Q29udHJvbGxlciAoaS5lLiB0aGUgcG9seWZpbGwgd2FzIGluc3RhbGxlZCBkdWUgdG9cbiAgICAgICAgICAvLyBfX0ZPUkNFX0lOU1RBTExfQUJPUlRDT05UUk9MTEVSX1BPTFlGSUxMIGJlaW5nIHNldCksIHRoZW4gcGFzc2luZyBvdXJcbiAgICAgICAgICAvLyBmYWtlIEFib3J0U2lnbmFsIHRvIHRoZSBuYXRpdmUgZmV0Y2ggd2lsbCB0cmlnZ2VyOlxuICAgICAgICAgIC8vIFR5cGVFcnJvcjogRmFpbGVkIHRvIGV4ZWN1dGUgJ2ZldGNoJyBvbiAnV2luZG93JzogbWVtYmVyIHNpZ25hbCBpcyBub3Qgb2YgdHlwZSBBYm9ydFNpZ25hbC5cbiAgICAgICAgICBkZWxldGUgaW5pdC5zaWduYWw7XG4gICAgICAgIH0gLy8gUmV0dXJuIHRoZSBmYXN0ZXN0IHByb21pc2UgKGRvbid0IG5lZWQgdG8gd2FpdCBmb3IgcmVxdWVzdCB0byBmaW5pc2gpXG5cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtjYW5jZWxsYXRpb24sIHJlYWxGZXRjaChpbnB1dCwgaW5pdCldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWxGZXRjaChpbnB1dCwgaW5pdCk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBmZXRjaDogYWJvcnRhYmxlRmV0Y2gsXG4gICAgICBSZXF1ZXN0OiBSZXF1ZXN0XG4gICAgfTtcbiAgfVxuXG4gIChmdW5jdGlvbiAoc2VsZikge1xuXG4gICAgaWYgKCFwb2x5ZmlsbE5lZWRlZChzZWxmKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc2VsZi5mZXRjaCkge1xuICAgICAgY29uc29sZS53YXJuKCdmZXRjaCgpIGlzIG5vdCBhdmFpbGFibGUsIGNhbm5vdCBpbnN0YWxsIGFib3J0Y29udHJvbGxlci1wb2x5ZmlsbCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfYWJvcnRhYmxlRmV0Y2ggPSBhYm9ydGFibGVGZXRjaERlY29yYXRvcihzZWxmKSxcbiAgICAgICAgZmV0Y2ggPSBfYWJvcnRhYmxlRmV0Y2guZmV0Y2gsXG4gICAgICAgIFJlcXVlc3QgPSBfYWJvcnRhYmxlRmV0Y2guUmVxdWVzdDtcblxuICAgIHNlbGYuZmV0Y2ggPSBmZXRjaDtcbiAgICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLCAnQWJvcnRDb250cm9sbGVyJywge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBBYm9ydENvbnRyb2xsZXJcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZiwgJ0Fib3J0U2lnbmFsJywge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBBYm9ydFNpZ25hbFxuICAgIH0pO1xuICB9KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogZ2xvYmFsKTtcblxufSkpKTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGJvb2xlYW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gWyd0cnVlJywgJ3QnLCAneWVzJywgJ3knLCAnb24nLCAnMSddLmluY2x1ZGVzKHZhbHVlLnRyaW0oKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAxO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5ib29sZWFuID0gYm9vbGVhbjtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG52YXIgS19NQVhfTEVOR1RIID0gMHg3ZmZmZmZmZlxuZXhwb3J0cy5rTWF4TGVuZ3RoID0gS19NQVhfTEVOR1RIXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3RcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZVxuICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YFxuICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydFxuICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKVxuXG5pZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgJ1RoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSAnICtcbiAgICAnYGJ1ZmZlcmAgdjUueC4gVXNlIGBidWZmZXJgIHY0LnggaWYgeW91IHJlcXVpcmUgb2xkIGJyb3dzZXIgc3VwcG9ydC4nXG4gIClcbn1cblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHsgX19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9IH1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MlxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsICdwYXJlbnQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRoaXMpKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMuYnVmZmVyXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAnb2Zmc2V0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ5dGVPZmZzZXRcbiAgfVxufSlcblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgbGVuZ3RoICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbmlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAhPSBudWxsICYmXG4gICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh2YWx1ZSlcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICAgJ29yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcgKyAodHlwZW9mIHZhbHVlKVxuICAgIClcbiAgfVxuXG4gIGlmIChpc0luc3RhbmNlKHZhbHVlLCBBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgQXJyYXlCdWZmZXIpKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICApXG4gIH1cblxuICB2YXIgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgdmFyIGIgPSBmcm9tT2JqZWN0KHZhbHVlKVxuICBpZiAoYikgcmV0dXJuIGJcblxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvUHJpbWl0aXZlICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZVtTeW1ib2wudG9QcmltaXRpdmVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKFxuICAgICAgdmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aFxuICAgIClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5CdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG5CdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdmFyIGJ1ZiA9IGNyZWF0ZUJ1ZmZlcihsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBidWZbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcIm9mZnNldFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIHZhciBidWZcbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGJ1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIHZhciBsZW4gPSBjaGVja2VkKG9iai5sZW5ndGgpIHwgMFxuICAgIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuKVxuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBidWZcbiAgICB9XG5cbiAgICBvYmouY29weShidWYsIDAsIDAsIGxlbilcbiAgICByZXR1cm4gYnVmXG4gIH1cblxuICBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcigwKVxuICAgIH1cbiAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopXG4gIH1cblxuICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIEFycmF5LmlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqLmRhdGEpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IEtfTUFYX0xFTkdUSGAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsgS19NQVhfTEVOR1RILnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyID09PSB0cnVlICYmXG4gICAgYiAhPT0gQnVmZmVyLnByb3RvdHlwZSAvLyBzbyBCdWZmZXIuaXNCdWZmZXIoQnVmZmVyLnByb3RvdHlwZSkgd2lsbCBiZSBmYWxzZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKGlzSW5zdGFuY2UoYSwgVWludDhBcnJheSkpIGEgPSBCdWZmZXIuZnJvbShhLCBhLm9mZnNldCwgYS5ieXRlTGVuZ3RoKVxuICBpZiAoaXNJbnN0YW5jZShiLCBVaW50OEFycmF5KSkgYiA9IEJ1ZmZlci5mcm9tKGIsIGIub2Zmc2V0LCBiLmJ5dGVMZW5ndGgpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknXG4gICAgKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuICAgIH1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBtdXN0TWF0Y2ggPSAoYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdID09PSB0cnVlKVxuICBpZiAoIW11c3RNYXRjaCAmJiBsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHtcbiAgICAgICAgICByZXR1cm4gbXVzdE1hdGNoID8gLTEgOiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICB9XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIChhbmQgdGhlIGBpcy1idWZmZXJgIG5wbSBwYWNrYWdlKVxuLy8gdG8gZGV0ZWN0IGEgQnVmZmVyIGluc3RhbmNlLiBJdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgYGluc3RhbmNlb2YgQnVmZmVyYFxuLy8gcmVsaWFibHkgaW4gYSBicm93c2VyaWZ5IGNvbnRleHQgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBkaWZmZXJlbnRcbi8vIGNvcGllcyBvZiB0aGUgJ2J1ZmZlcicgcGFja2FnZSBpbiB1c2UuIFRoaXMgbWV0aG9kIHdvcmtzIGV2ZW4gZm9yIEJ1ZmZlclxuLy8gaW5zdGFuY2VzIHRoYXQgd2VyZSBjcmVhdGVkIGZyb20gYW5vdGhlciBjb3B5IG9mIHRoZSBgYnVmZmVyYCBwYWNrYWdlLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMTU0XG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nID0gQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZ1xuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLnJlcGxhY2UoLyguezJ9KS9nLCAnJDEgJykudHJpbSgpXG4gIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKGlzSW5zdGFuY2UodGFyZ2V0LCBVaW50OEFycmF5KSkge1xuICAgIHRhcmdldCA9IEJ1ZmZlci5mcm9tKHRhcmdldCwgdGFyZ2V0Lm9mZnNldCwgdGFyZ2V0LmJ5dGVMZW5ndGgpXG4gIH1cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB0YXJnZXQpXG4gICAgKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAobnVtYmVySXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyAoYnl0ZXNbaSArIDFdICogMjU2KSlcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMVxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKVxuICB9XG5cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlVUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweGZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsICg4ICogYnl0ZUxlbmd0aCkgLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMVxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA4LCAxLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCwgLTEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDUyLCA4KVxuICByZXR1cm4gb2Zmc2V0ICsgOFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlTEUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbi8vIGNvcHkodGFyZ2V0QnVmZmVyLCB0YXJnZXRTdGFydD0wLCBzb3VyY2VTdGFydD0wLCBzb3VyY2VFbmQ9YnVmZmVyLmxlbmd0aClcbkJ1ZmZlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKHRhcmdldCwgdGFyZ2V0U3RhcnQsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyJylcbiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwXG4gIGlmICghZW5kICYmIGVuZCAhPT0gMCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldFN0YXJ0ID49IHRhcmdldC5sZW5ndGgpIHRhcmdldFN0YXJ0ID0gdGFyZ2V0Lmxlbmd0aFxuICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDBcbiAgaWYgKGVuZCA+IDAgJiYgZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lXG4gIGlmIChlbmQgPT09IHN0YXJ0KSByZXR1cm4gMFxuICBpZiAodGFyZ2V0Lmxlbmd0aCA9PT0gMCB8fCB0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zXG4gIGlmICh0YXJnZXRTdGFydCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2UgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yICh2YXIgaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoKGVuY29kaW5nID09PSAndXRmOCcgJiYgY29kZSA8IDEyOCkgfHxcbiAgICAgICAgICBlbmNvZGluZyA9PT0gJ2xhdGluMScpIHtcbiAgICAgICAgLy8gRmFzdCBwYXRoOiBJZiBgdmFsYCBmaXRzIGludG8gYSBzaW5nbGUgYnl0ZSwgdXNlIHRoYXQgbnVtZXJpYyB2YWx1ZS5cbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyB2YWwgK1xuICAgICAgICAnXCIgaXMgaW52YWxpZCBmb3IgYXJndW1lbnQgXCJ2YWx1ZVwiJylcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSB0YWtlcyBlcXVhbCBzaWducyBhcyBlbmQgb2YgdGhlIEJhc2U2NCBlbmNvZGluZ1xuICBzdHIgPSBzdHIuc3BsaXQoJz0nKVswXVxuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikge1xuICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpXG59XG5cbmZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVha1xuICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXVxuICB9XG4gIHJldHVybiBpXG59XG5cbi8vIEFycmF5QnVmZmVyIG9yIFVpbnQ4QXJyYXkgb2JqZWN0cyBmcm9tIG90aGVyIGNvbnRleHRzIChpLmUuIGlmcmFtZXMpIGRvIG5vdCBwYXNzXG4vLyB0aGUgYGluc3RhbmNlb2ZgIGNoZWNrIGJ1dCB0aGV5IHNob3VsZCBiZSB0cmVhdGVkIGFzIG9mIHRoYXQgdHlwZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE2NlxuZnVuY3Rpb24gaXNJbnN0YW5jZSAob2JqLCB0eXBlKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiB0eXBlIHx8XG4gICAgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3Rvci5uYW1lICE9IG51bGwgJiZcbiAgICAgIG9iai5jb25zdHJ1Y3Rvci5uYW1lID09PSB0eXBlLm5hbWUpXG59XG5mdW5jdGlvbiBudW1iZXJJc05hTiAob2JqKSB7XG4gIC8vIEZvciBJRTExIHN1cHBvcnRcbiAgcmV0dXJuIG9iaiAhPT0gb2JqIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG59XG4iLCJmdW5jdGlvbiBDYXNlbGVzcyAoZGljdCkge1xuICB0aGlzLmRpY3QgPSBkaWN0IHx8IHt9XG59XG5DYXNlbGVzcy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBjbG9iYmVyKSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBpIGluIG5hbWUpIHtcbiAgICAgIHRoaXMuc2V0KGksIG5hbWVbaV0sIHZhbHVlKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGNsb2JiZXIgPT09ICd1bmRlZmluZWQnKSBjbG9iYmVyID0gdHJ1ZVxuICAgIHZhciBoYXMgPSB0aGlzLmhhcyhuYW1lKVxuXG4gICAgaWYgKCFjbG9iYmVyICYmIGhhcykgdGhpcy5kaWN0W2hhc10gPSB0aGlzLmRpY3RbaGFzXSArICcsJyArIHZhbHVlXG4gICAgZWxzZSB0aGlzLmRpY3RbaGFzIHx8IG5hbWVdID0gdmFsdWVcbiAgICByZXR1cm4gaGFzXG4gIH1cbn1cbkNhc2VsZXNzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuZGljdClcbiAgICAsIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKClcbiAgICA7XG4gIGZvciAodmFyIGk9MDtpPGtleXMubGVuZ3RoO2krKykge1xuICAgIGlmIChrZXlzW2ldLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUpIHJldHVybiBrZXlzW2ldXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5DYXNlbGVzcy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKVxuICB2YXIgcmVzdWx0LCBfa2V5XG4gIHZhciBoZWFkZXJzID0gdGhpcy5kaWN0XG4gIE9iamVjdC5rZXlzKGhlYWRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIF9rZXkgPSBrZXkudG9Mb3dlckNhc2UoKVxuICAgIGlmIChuYW1lID09PSBfa2V5KSByZXN1bHQgPSBoZWFkZXJzW2tleV1cbiAgfSlcbiAgcmV0dXJuIHJlc3VsdFxufVxuQ2FzZWxlc3MucHJvdG90eXBlLnN3YXAgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgaGFzID0gdGhpcy5oYXMobmFtZSlcbiAgaWYgKGhhcyA9PT0gbmFtZSkgcmV0dXJuXG4gIGlmICghaGFzKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGlzIG5vIGhlYWRlciB0aGFuIG1hdGNoZXMgXCInK25hbWUrJ1wiJylcbiAgdGhpcy5kaWN0W25hbWVdID0gdGhpcy5kaWN0W2hhc11cbiAgZGVsZXRlIHRoaXMuZGljdFtoYXNdXG59XG5DYXNlbGVzcy5wcm90b3R5cGUuZGVsID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIGhhcyA9IHRoaXMuaGFzKG5hbWUpXG4gIHJldHVybiBkZWxldGUgdGhpcy5kaWN0W2hhcyB8fCBuYW1lXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkaWN0KSB7cmV0dXJuIG5ldyBDYXNlbGVzcyhkaWN0KX1cbm1vZHVsZS5leHBvcnRzLmh0dHBpZnkgPSBmdW5jdGlvbiAocmVzcCwgaGVhZGVycykge1xuICB2YXIgYyA9IG5ldyBDYXNlbGVzcyhoZWFkZXJzKVxuICByZXNwLnNldEhlYWRlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBjbG9iYmVyKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVyblxuICAgIHJldHVybiBjLnNldChrZXksIHZhbHVlLCBjbG9iYmVyKVxuICB9XG4gIHJlc3AuaGFzSGVhZGVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBjLmhhcyhrZXkpXG4gIH1cbiAgcmVzcC5nZXRIZWFkZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGMuZ2V0KGtleSlcbiAgfVxuICByZXNwLnJlbW92ZUhlYWRlciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gYy5kZWwoa2V5KVxuICB9XG4gIHJlc3AuaGVhZGVycyA9IGMuZGljdFxuICByZXR1cm4gY1xufVxuIiwiKGZ1bmN0aW9uKHNlbGYpIHtcblxudmFyIGlycmVsZXZhbnQgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgdmFyIHN1cHBvcnQgPSB7XG4gICAgc2VhcmNoUGFyYW1zOiAnVVJMU2VhcmNoUGFyYW1zJyBpbiBzZWxmLFxuICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxuICAgIGJsb2I6XG4gICAgICAnRmlsZVJlYWRlcicgaW4gc2VsZiAmJlxuICAgICAgJ0Jsb2InIGluIHNlbGYgJiZcbiAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBuZXcgQmxvYigpO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfSkoKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGZcbiAgfTtcblxuICBmdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgRGF0YVZpZXcucHJvdG90eXBlLmlzUHJvdG90eXBlT2Yob2JqKVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgdmlld0NsYXNzZXMgPSBbXG4gICAgICAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcbiAgICBdO1xuXG4gICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cbiAgICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgICAgZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxuICAgICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcbiAgICB9XG4gICAgcmV0dXJuIG5hbWUudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9O1xuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaGVhZGVycykge1xuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKTtcbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXTtcbiAgICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gb2xkVmFsdWUgKyAnLCAnICsgdmFsdWUgOiB2YWx1ZTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldO1xuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGl0ZW1zLnB1c2gobmFtZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9O1xuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSlcbiAgICB9XG4gICAgYm9keS5ib2R5VXNlZCA9IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpO1xuICAgICAgfTtcbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChyZWFkZXIuZXJyb3IpO1xuICAgICAgfTtcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICB2YXIgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpO1xuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcik7XG4gICAgcmVhZGVyLnJlYWRBc1RleHQoYmxvYik7XG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG4gICAgdmFyIGNoYXJzID0gbmV3IEFycmF5KHZpZXcubGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xuICAgICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aCk7XG4gICAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKTtcbiAgICAgIHJldHVybiB2aWV3LmJ1ZmZlclxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEJvZHkoKSB7XG4gICAgdGhpcy5ib2R5VXNlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHk7XG4gICAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5O1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlGb3JtRGF0YSA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcik7XG4gICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gbmV3IEJsb2IoW3RoaXMuX2JvZHlBcnJheUJ1ZmZlcl0pO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIChBcnJheUJ1ZmZlci5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSB8fCBpc0FycmF5QnVmZmVyVmlldyhib2R5KSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpO1xuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIGJsb2InKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmJsb2IoKS50aGVuKHJlYWRCbG9iQXNBcnJheUJ1ZmZlcilcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpO1xuICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fYm9keUJsb2IpIHtcbiAgICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZWFkQXJyYXlCdWZmZXJBc1RleHQodGhpcy5fYm9keUFycmF5QnVmZmVyKSlcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLy8gSFRUUCBtZXRob2RzIHdob3NlIGNhcGl0YWxpemF0aW9uIHNob3VsZCBiZSBub3JtYWxpemVkXG4gIHZhciBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2RcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgYm9keSA9IG9wdGlvbnMuYm9keTtcblxuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmw7XG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHM7XG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kO1xuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZTtcbiAgICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsO1xuICAgICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXQ7XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpO1xuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJztcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKTtcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGw7XG4gICAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbDtcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbDtcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJylcbiAgICB9XG4gICAgdGhpcy5faW5pdEJvZHkoYm9keSk7XG4gIH1cblxuICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxuICB9O1xuXG4gIGZ1bmN0aW9uIGRlY29kZShib2R5KSB7XG4gICAgdmFyIGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICBib2R5XG4gICAgICAudHJpbSgpXG4gICAgICAuc3BsaXQoJyYnKVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKTtcbiAgICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIHJldHVybiBmb3JtXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICAvLyBSZXBsYWNlIGluc3RhbmNlcyBvZiBcXHJcXG4gYW5kIFxcbiBmb2xsb3dlZCBieSBhdCBsZWFzdCBvbmUgc3BhY2Ugb3IgaG9yaXpvbnRhbCB0YWIgd2l0aCBhIHNwYWNlXG4gICAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKTtcbiAgICBwcmVQcm9jZXNzZWRIZWFkZXJzLnNwbGl0KC9cXHI/XFxuLykuZm9yRWFjaChmdW5jdGlvbihsaW5lKSB7XG4gICAgICB2YXIgcGFydHMgPSBsaW5lLnNwbGl0KCc6Jyk7XG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKCk7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKCk7XG4gICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBoZWFkZXJzXG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnO1xuICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzO1xuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDA7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snO1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJztcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdCk7XG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKTtcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgICBzdGF0dXM6IHRoaXMuc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxuICAgICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICAgIHVybDogdGhpcy51cmxcbiAgICB9KVxuICB9O1xuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSk7XG4gICAgcmVzcG9uc2UudHlwZSA9ICdlcnJvcic7XG4gICAgcmV0dXJuIHJlc3BvbnNlXG4gIH07XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdO1xuXG4gIFJlc3BvbnNlLnJlZGlyZWN0ID0gZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG4gIH07XG5cbiAgZXhwb3J0cy5ET01FeGNlcHRpb24gPSBzZWxmLkRPTUV4Y2VwdGlvbjtcbiAgdHJ5IHtcbiAgICBuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXhwb3J0cy5ET01FeGNlcHRpb24gPSBmdW5jdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrO1xuICAgIH07XG4gICAgZXhwb3J0cy5ET01FeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGV4cG9ydHMuRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGV4cG9ydHMuRE9NRXhjZXB0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KTtcblxuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsICYmIHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgICAgfVxuXG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgIGZ1bmN0aW9uIGFib3J0WGhyKCkge1xuICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgIH1cblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgICAgc3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG4gICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcbiAgICAgICAgfTtcbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKTtcbiAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHJlcXVlc3QuY3JlZGVudGlhbHMgPT09ICdvbWl0Jykge1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwpIHtcbiAgICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocik7XG5cbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdCk7XG4gICAgfSlcbiAgfVxuXG4gIGZldGNoLnBvbHlmaWxsID0gdHJ1ZTtcblxuICBpZiAoIXNlbGYuZmV0Y2gpIHtcbiAgICBzZWxmLmZldGNoID0gZmV0Y2g7XG4gICAgc2VsZi5IZWFkZXJzID0gSGVhZGVycztcbiAgICBzZWxmLlJlcXVlc3QgPSBSZXF1ZXN0O1xuICAgIHNlbGYuUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgfVxuXG4gIGV4cG9ydHMuSGVhZGVycyA9IEhlYWRlcnM7XG4gIGV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG4gIGV4cG9ydHMuUmVzcG9uc2UgPSBSZXNwb25zZTtcbiAgZXhwb3J0cy5mZXRjaCA9IGZldGNoO1xuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KHt9KSk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyk7XG4iLCIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKi9cblxuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBsb2coLi4uYXJncykge1xuXHQvLyBUaGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuXHQvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuXHRyZXR1cm4gdHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmXG5cdFx0Y29uc29sZS5sb2cgJiZcblx0XHRjb25zb2xlLmxvZyguLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmluc3RhbmNlcyA9IFtdO1xuXG5cdC8qKlxuXHQqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuXHQqL1xuXG5cdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdGNyZWF0ZURlYnVnLnNraXBzID0gW107XG5cblx0LyoqXG5cdCogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuXHQqXG5cdCogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuXHQqL1xuXHRjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzID0ge307XG5cblx0LyoqXG5cdCogU2VsZWN0cyBhIGNvbG9yIGZvciBhIGRlYnVnIG5hbWVzcGFjZVxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgVGhlIG5hbWVzcGFjZSBzdHJpbmcgZm9yIHRoZSBmb3IgdGhlIGRlYnVnIGluc3RhbmNlIHRvIGJlIGNvbG9yZWRcblx0KiBAcmV0dXJuIHtOdW1iZXJ8U3RyaW5nfSBBbiBBTlNJIGNvbG9yIGNvZGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0aGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cblx0XHRyZXR1cm4gY3JlYXRlRGVidWcuY29sb3JzW01hdGguYWJzKGhhc2gpICUgY3JlYXRlRGVidWcuY29sb3JzLmxlbmd0aF07XG5cdH1cblx0Y3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcblxuXHQvKipcblx0KiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAcmV0dXJuIHtGdW5jdGlvbn1cblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblx0XHRsZXQgcHJldlRpbWU7XG5cblx0XHRmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG5cdFx0XHQvLyBEaXNhYmxlZD9cblx0XHRcdGlmICghZGVidWcuZW5hYmxlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHNlbGYgPSBkZWJ1ZztcblxuXHRcdFx0Ly8gU2V0IGBkaWZmYCB0aW1lc3RhbXBcblx0XHRcdGNvbnN0IGN1cnIgPSBOdW1iZXIobmV3IERhdGUoKSk7XG5cdFx0XHRjb25zdCBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG5cdFx0XHRzZWxmLmRpZmYgPSBtcztcblx0XHRcdHNlbGYucHJldiA9IHByZXZUaW1lO1xuXHRcdFx0c2VsZi5jdXJyID0gY3Vycjtcblx0XHRcdHByZXZUaW1lID0gY3VycjtcblxuXHRcdFx0YXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuXHRcdFx0XHRhcmdzLnVuc2hpZnQoJyVPJyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cdFx0XHRsZXQgaW5kZXggPSAwO1xuXHRcdFx0YXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIChtYXRjaCwgZm9ybWF0KSA9PiB7XG5cdFx0XHRcdC8vIElmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcblx0XHRcdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblx0XHRcdFx0aWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhcmdzW2luZGV4XTtcblx0XHRcdFx0XHRtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cblx0XHRcdFx0XHQvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cdFx0XHRcdFx0YXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGluZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cdFx0XHRjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cblx0XHRcdGNvbnN0IGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuXHRcdFx0bG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0fVxuXG5cdFx0ZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcdGRlYnVnLmVuYWJsZWQgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG5cdFx0ZGVidWcudXNlQ29sb3JzID0gY3JlYXRlRGVidWcudXNlQ29sb3JzKCk7XG5cdFx0ZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXHRcdGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXHRcdGRlYnVnLmV4dGVuZCA9IGV4dGVuZDtcblx0XHQvLyBEZWJ1Zy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcblx0XHQvLyBkZWJ1Zy5yYXdMb2cgPSByYXdMb2c7XG5cblx0XHQvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuXHRcdGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0Y3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG5cdFx0fVxuXG5cdFx0Y3JlYXRlRGVidWcuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG5cdFx0cmV0dXJuIGRlYnVnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVzdHJveSgpIHtcblx0XHRjb25zdCBpbmRleCA9IGNyZWF0ZURlYnVnLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdGNyZWF0ZURlYnVnLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuXHRcdGNvbnN0IG5ld0RlYnVnID0gY3JlYXRlRGVidWcodGhpcy5uYW1lc3BhY2UgKyAodHlwZW9mIGRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyAnOicgOiBkZWxpbWl0ZXIpICsgbmFtZXNwYWNlKTtcblx0XHRuZXdEZWJ1Zy5sb2cgPSB0aGlzLmxvZztcblx0XHRyZXR1cm4gbmV3RGVidWc7XG5cdH1cblxuXHQvKipcblx0KiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG5cdCogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cblx0KlxuXHQqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcblx0XHRjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuXG5cdFx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0XHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdFx0bGV0IGk7XG5cdFx0Y29uc3Qgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuXHRcdGNvbnN0IGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKCFzcGxpdFtpXSkge1xuXHRcdFx0XHQvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0bmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG5cblx0XHRcdGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDA7IGkgPCBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGNvbnN0IGluc3RhbmNlID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzW2ldO1xuXHRcdFx0aW5zdGFuY2UuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdGNyZWF0ZURlYnVnLmVuYWJsZShjcmVhdGVEZWJ1Zy5sb2FkKCkpO1xuXG5cdHJldHVybiBjcmVhdGVEZWJ1Zztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXR1cDtcbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG52YXIgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIEZvcm1hdCA9IHtcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWwuYXNzaWduKFxuICAgIHtcbiAgICAgICAgJ2RlZmF1bHQnOiBGb3JtYXQuUkZDMzk4NixcbiAgICAgICAgZm9ybWF0dGVyczoge1xuICAgICAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBGb3JtYXRcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpO1xudmFyIHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZm9ybWF0czogZm9ybWF0cyxcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGFsbG93UHJvdG90eXBlczogZmFsc2UsXG4gICAgYXJyYXlMaW1pdDogMjAsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGNvbW1hOiBmYWxzZSxcbiAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgaWdub3JlUXVlcnlQcmVmaXg6IGZhbHNlLFxuICAgIGludGVycHJldE51bWVyaWNFbnRpdGllczogZmFsc2UsXG4gICAgcGFyYW1ldGVyTGltaXQ6IDEwMDAsXG4gICAgcGFyc2VBcnJheXM6IHRydWUsXG4gICAgcGxhaW5PYmplY3RzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiMoXFxkKyk7L2csIGZ1bmN0aW9uICgkMCwgbnVtYmVyU3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG51bWJlclN0ciwgMTApKTtcbiAgICB9KTtcbn07XG5cbnZhciBwYXJzZUFycmF5VmFsdWUgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNvbW1hICYmIHZhbC5pbmRleE9mKCcsJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdmFsLnNwbGl0KCcsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbn07XG5cbi8vIFRoaXMgaXMgd2hhdCBicm93c2VycyB3aWxsIHN1Ym1pdCB3aGVuIHRoZSDinJMgY2hhcmFjdGVyIG9jY3VycyBpbiBhblxuLy8gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIGJvZHkgYW5kIHRoZSBlbmNvZGluZyBvZiB0aGUgcGFnZSBjb250YWluaW5nXG4vLyB0aGUgZm9ybSBpcyBpc28tODg1OS0xLCBvciB3aGVuIHRoZSBzdWJtaXR0ZWQgZm9ybSBoYXMgYW4gYWNjZXB0LWNoYXJzZXRcbi8vIGF0dHJpYnV0ZSBvZiBpc28tODg1OS0xLiBQcmVzdW1hYmx5IGFsc28gd2l0aCBvdGhlciBjaGFyc2V0cyB0aGF0IGRvIG5vdCBjb250YWluXG4vLyB0aGUg4pyTIGNoYXJhY3Rlciwgc3VjaCBhcyB1cy1hc2NpaS5cbnZhciBpc29TZW50aW5lbCA9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpXG5cbi8vIFRoZXNlIGFyZSB0aGUgcGVyY2VudC1lbmNvZGVkIHV0Zi04IG9jdGV0cyByZXByZXNlbnRpbmcgYSBjaGVja21hcmssIGluZGljYXRpbmcgdGhhdCB0aGUgcmVxdWVzdCBhY3R1YWxseSBpcyB1dGYtOCBlbmNvZGVkLlxudmFyIGNoYXJzZXRTZW50aW5lbCA9ICd1dGY4PSVFMiU5QyU5Myc7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcblxudmFyIHBhcnNlVmFsdWVzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ1ZhbHVlcyhzdHIsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgdmFyIGNsZWFuU3RyID0gb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA/IHN0ci5yZXBsYWNlKC9eXFw/LywgJycpIDogc3RyO1xuICAgIHZhciBsaW1pdCA9IG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09IEluZmluaXR5ID8gdW5kZWZpbmVkIDogb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdDtcbiAgICB2YXIgcGFydHMgPSBjbGVhblN0ci5zcGxpdChvcHRpb25zLmRlbGltaXRlciwgbGltaXQpO1xuICAgIHZhciBza2lwSW5kZXggPSAtMTsgLy8gS2VlcCB0cmFjayBvZiB3aGVyZSB0aGUgdXRmOCBzZW50aW5lbCB3YXMgZm91bmRcbiAgICB2YXIgaTtcblxuICAgIHZhciBjaGFyc2V0ID0gb3B0aW9ucy5jaGFyc2V0O1xuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0c1tpXS5pbmRleE9mKCd1dGY4PScpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzW2ldID09PSBjaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICd1dGYtOCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0c1tpXSA9PT0gaXNvU2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICdpc28tODg1OS0xJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2tpcEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpID0gcGFydHMubGVuZ3RoOyAvLyBUaGUgZXNsaW50IHNldHRpbmdzIGRvIG5vdCBhbGxvdyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSA9PT0gc2tpcEluZGV4KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuXG4gICAgICAgIHZhciBicmFja2V0RXF1YWxzUG9zID0gcGFydC5pbmRleE9mKCddPScpO1xuICAgICAgICB2YXIgcG9zID0gYnJhY2tldEVxdWFsc1BvcyA9PT0gLTEgPyBwYXJ0LmluZGV4T2YoJz0nKSA6IGJyYWNrZXRFcXVhbHNQb3MgKyAxO1xuXG4gICAgICAgIHZhciBrZXksIHZhbDtcbiAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAna2V5Jyk7XG4gICAgICAgICAgICB2YWwgPSBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA/IG51bGwgOiAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LnNsaWNlKDAsIHBvcyksIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHZhbCA9IHV0aWxzLm1heWJlTWFwKFxuICAgICAgICAgICAgICAgIHBhcnNlQXJyYXlWYWx1ZShwYXJ0LnNsaWNlKHBvcyArIDEpLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZW5jb2RlZFZhbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kZWNvZGVyKGVuY29kZWRWYWwsIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICd2YWx1ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsICYmIG9wdGlvbnMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzICYmIGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgdmFsID0gaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzKHZhbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFydC5pbmRleE9mKCdbXT0nKSA+IC0xKSB7XG4gICAgICAgICAgICB2YWwgPSBpc0FycmF5KHZhbCkgPyBbdmFsXSA6IHZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdXRpbHMuY29tYmluZShvYmpba2V5XSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICB2YXIgbGVhZiA9IHZhbHVlc1BhcnNlZCA/IHZhbCA6IHBhcnNlQXJyYXlWYWx1ZSh2YWwsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBvYmo7XG4gICAgICAgIHZhciByb290ID0gY2hhaW5baV07XG5cbiAgICAgICAgaWYgKHJvb3QgPT09ICdbXScgJiYgb3B0aW9ucy5wYXJzZUFycmF5cykge1xuICAgICAgICAgICAgb2JqID0gW10uY29uY2F0KGxlYWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgICAgICAgICB2YXIgY2xlYW5Sb290ID0gcm9vdC5jaGFyQXQoMCkgPT09ICdbJyAmJiByb290LmNoYXJBdChyb290Lmxlbmd0aCAtIDEpID09PSAnXScgPyByb290LnNsaWNlKDEsIC0xKSA6IHJvb3Q7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChjbGVhblJvb3QsIDEwKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5wYXJzZUFycmF5cyAmJiBjbGVhblJvb3QgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgb2JqID0geyAwOiBsZWFmIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICFpc05hTihpbmRleClcbiAgICAgICAgICAgICAgICAmJiByb290ICE9PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBTdHJpbmcoaW5kZXgpID09PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBpbmRleCA+PSAwXG4gICAgICAgICAgICAgICAgJiYgKG9wdGlvbnMucGFyc2VBcnJheXMgJiYgaW5kZXggPD0gb3B0aW9ucy5hcnJheUxpbWl0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb2JqID0gW107XG4gICAgICAgICAgICAgICAgb2JqW2luZGV4XSA9IGxlYWY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ialtjbGVhblJvb3RdID0gbGVhZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxlYWYgPSBvYmo7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB9XG5cbiAgICByZXR1cm4gbGVhZjtcbn07XG5cbnZhciBwYXJzZUtleXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nS2V5cyhnaXZlbktleSwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICBpZiAoIWdpdmVuS2V5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBUcmFuc2Zvcm0gZG90IG5vdGF0aW9uIHRvIGJyYWNrZXQgbm90YXRpb25cbiAgICB2YXIga2V5ID0gb3B0aW9ucy5hbGxvd0RvdHMgPyBnaXZlbktleS5yZXBsYWNlKC9cXC4oW14uW10rKS9nLCAnWyQxXScpIDogZ2l2ZW5LZXk7XG5cbiAgICAvLyBUaGUgcmVnZXggY2h1bmtzXG5cbiAgICB2YXIgYnJhY2tldHMgPSAvKFxcW1teW1xcXV0qXSkvO1xuICAgIHZhciBjaGlsZCA9IC8oXFxbW15bXFxdXSpdKS9nO1xuXG4gICAgLy8gR2V0IHRoZSBwYXJlbnRcblxuICAgIHZhciBzZWdtZW50ID0gb3B0aW9ucy5kZXB0aCA+IDAgJiYgYnJhY2tldHMuZXhlYyhrZXkpO1xuICAgIHZhciBwYXJlbnQgPSBzZWdtZW50ID8ga2V5LnNsaWNlKDAsIHNlZ21lbnQuaW5kZXgpIDoga2V5O1xuXG4gICAgLy8gU3Rhc2ggdGhlIHBhcmVudCBpZiBpdCBleGlzdHNcblxuICAgIHZhciBrZXlzID0gW107XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmVuJ3QgdXNpbmcgcGxhaW4gb2JqZWN0cywgb3B0aW9uYWxseSBwcmVmaXgga2V5cyB0aGF0IHdvdWxkIG92ZXJ3cml0ZSBvYmplY3QgcHJvdG90eXBlIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBwYXJlbnQpKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAga2V5cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuXG4gICAgLy8gTG9vcCB0aHJvdWdoIGNoaWxkcmVuIGFwcGVuZGluZyB0byB0aGUgYXJyYXkgdW50aWwgd2UgaGl0IGRlcHRoXG5cbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKG9wdGlvbnMuZGVwdGggPiAwICYmIChzZWdtZW50ID0gY2hpbGQuZXhlYyhrZXkpKSAhPT0gbnVsbCAmJiBpIDwgb3B0aW9ucy5kZXB0aCkge1xuICAgICAgICBpICs9IDE7XG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc2VnbWVudFsxXS5zbGljZSgxLCAtMSkpKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGtleXMucHVzaChzZWdtZW50WzFdKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSdzIGEgcmVtYWluZGVyLCBqdXN0IGFkZCB3aGF0ZXZlciBpcyBsZWZ0XG5cbiAgICBpZiAoc2VnbWVudCkge1xuICAgICAgICBrZXlzLnB1c2goJ1snICsga2V5LnNsaWNlKHNlZ21lbnQuaW5kZXgpICsgJ10nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VPYmplY3Qoa2V5cywgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpO1xufTtcblxudmFyIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyhvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9XG5cbiAgICBpZiAob3B0cy5kZWNvZGVyICE9PSBudWxsICYmIG9wdHMuZGVjb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRGVjb2RlciBoYXMgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHZhciBjaGFyc2V0ID0gdHlwZW9mIG9wdHMuY2hhcnNldCA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5jaGFyc2V0IDogb3B0cy5jaGFyc2V0O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWxsb3dEb3RzOiB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cyxcbiAgICAgICAgYWxsb3dQcm90b3R5cGVzOiB0eXBlb2Ygb3B0cy5hbGxvd1Byb3RvdHlwZXMgPT09ICdib29sZWFuJyA/IG9wdHMuYWxsb3dQcm90b3R5cGVzIDogZGVmYXVsdHMuYWxsb3dQcm90b3R5cGVzLFxuICAgICAgICBhcnJheUxpbWl0OiB0eXBlb2Ygb3B0cy5hcnJheUxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdHMuYXJyYXlMaW1pdCA6IGRlZmF1bHRzLmFycmF5TGltaXQsXG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzLmNoYXJzZXRTZW50aW5lbCxcbiAgICAgICAgY29tbWE6IHR5cGVvZiBvcHRzLmNvbW1hID09PSAnYm9vbGVhbicgPyBvcHRzLmNvbW1hIDogZGVmYXVsdHMuY29tbWEsXG4gICAgICAgIGRlY29kZXI6IHR5cGVvZiBvcHRzLmRlY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRzLmRlY29kZXIgOiBkZWZhdWx0cy5kZWNvZGVyLFxuICAgICAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3N0cmluZycgfHwgdXRpbHMuaXNSZWdFeHAob3B0cy5kZWxpbWl0ZXIpID8gb3B0cy5kZWxpbWl0ZXIgOiBkZWZhdWx0cy5kZWxpbWl0ZXIsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbXBsaWNpdC1jb2VyY2lvbiwgbm8tZXh0cmEtcGFyZW5zXG4gICAgICAgIGRlcHRoOiAodHlwZW9mIG9wdHMuZGVwdGggPT09ICdudW1iZXInIHx8IG9wdHMuZGVwdGggPT09IGZhbHNlKSA/ICtvcHRzLmRlcHRoIDogZGVmYXVsdHMuZGVwdGgsXG4gICAgICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiBvcHRzLmlnbm9yZVF1ZXJ5UHJlZml4ID09PSB0cnVlLFxuICAgICAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IHR5cGVvZiBvcHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgOiBkZWZhdWx0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMsXG4gICAgICAgIHBhcmFtZXRlckxpbWl0OiB0eXBlb2Ygb3B0cy5wYXJhbWV0ZXJMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLnBhcmFtZXRlckxpbWl0IDogZGVmYXVsdHMucGFyYW1ldGVyTGltaXQsXG4gICAgICAgIHBhcnNlQXJyYXlzOiBvcHRzLnBhcnNlQXJyYXlzICE9PSBmYWxzZSxcbiAgICAgICAgcGxhaW5PYmplY3RzOiB0eXBlb2Ygb3B0cy5wbGFpbk9iamVjdHMgPT09ICdib29sZWFuJyA/IG9wdHMucGxhaW5PYmplY3RzIDogZGVmYXVsdHMucGxhaW5PYmplY3RzLFxuICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IHR5cGVvZiBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmdcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBvcHRzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBub3JtYWxpemVQYXJzZU9wdGlvbnMob3B0cyk7XG5cbiAgICBpZiAoc3RyID09PSAnJyB8fCBzdHIgPT09IG51bGwgfHwgdHlwZW9mIHN0ciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIH1cblxuICAgIHZhciB0ZW1wT2JqID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBwYXJzZVZhbHVlcyhzdHIsIG9wdGlvbnMpIDogc3RyO1xuICAgIHZhciBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUga2V5cyBhbmQgc2V0dXAgdGhlIG5ldyBvYmplY3RcblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGVtcE9iaik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YXIgbmV3T2JqID0gcGFyc2VLZXlzKGtleSwgdGVtcE9ialtrZXldLCBvcHRpb25zLCB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyk7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1lcmdlKG9iaiwgbmV3T2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuY29tcGFjdChvYmopO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgYXJyYXlQcmVmaXhHZW5lcmF0b3JzID0ge1xuICAgIGJyYWNrZXRzOiBmdW5jdGlvbiBicmFja2V0cyhwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbXSc7XG4gICAgfSxcbiAgICBjb21tYTogJ2NvbW1hJyxcbiAgICBpbmRpY2VzOiBmdW5jdGlvbiBpbmRpY2VzKHByZWZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnWycgKyBrZXkgKyAnXSc7XG4gICAgfSxcbiAgICByZXBlYXQ6IGZ1bmN0aW9uIHJlcGVhdChwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgcHVzaCA9IEFycmF5LnByb3RvdHlwZS5wdXNoO1xudmFyIHB1c2hUb0FycmF5ID0gZnVuY3Rpb24gKGFyciwgdmFsdWVPckFycmF5KSB7XG4gICAgcHVzaC5hcHBseShhcnIsIGlzQXJyYXkodmFsdWVPckFycmF5KSA/IHZhbHVlT3JBcnJheSA6IFt2YWx1ZU9yQXJyYXldKTtcbn07XG5cbnZhciB0b0lTTyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgZGVmYXVsdEZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbnZhciBkZWZhdWx0cyA9IHtcbiAgICBhZGRRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZW5jb2RlOiB0cnVlLFxuICAgIGVuY29kZXI6IHV0aWxzLmVuY29kZSxcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OiBmYWxzZSxcbiAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXQsXG4gICAgZm9ybWF0dGVyOiBmb3JtYXRzLmZvcm1hdHRlcnNbZGVmYXVsdEZvcm1hdF0sXG4gICAgLy8gZGVwcmVjYXRlZFxuICAgIGluZGljZXM6IGZhbHNlLFxuICAgIHNlcmlhbGl6ZURhdGU6IGZ1bmN0aW9uIHNlcmlhbGl6ZURhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gdG9JU08uY2FsbChkYXRlKTtcbiAgICB9LFxuICAgIHNraXBOdWxsczogZmFsc2UsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZVxufTtcblxudmFyIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSA9IGZ1bmN0aW9uIGlzTm9uTnVsbGlzaFByaW1pdGl2ZSh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ251bWJlcidcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdib29sZWFuJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ3N5bWJvbCdcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdiaWdpbnQnO1xufTtcblxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShcbiAgICBvYmplY3QsXG4gICAgcHJlZml4LFxuICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVyLFxuICAgIGZpbHRlcixcbiAgICBzb3J0LFxuICAgIGFsbG93RG90cyxcbiAgICBzZXJpYWxpemVEYXRlLFxuICAgIGZvcm1hdHRlcixcbiAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgIGNoYXJzZXRcbikge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqID0gZmlsdGVyKHByZWZpeCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgb2JqID0gc2VyaWFsaXplRGF0ZShvYmopO1xuICAgIH0gZWxzZSBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgb2JqID0gdXRpbHMubWF5YmVNYXAob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pLmpvaW4oJywnKTtcbiAgICB9XG5cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIGlmIChzdHJpY3ROdWxsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGVyICYmICFlbmNvZGVWYWx1ZXNPbmx5ID8gZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknKSA6IHByZWZpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmIChpc05vbk51bGxpc2hQcmltaXRpdmUob2JqKSB8fCB1dGlscy5pc0J1ZmZlcihvYmopKSB7XG4gICAgICAgIGlmIChlbmNvZGVyKSB7XG4gICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBlbmNvZGVWYWx1ZXNPbmx5ID8gcHJlZml4IDogZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ3ZhbHVlJykpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihwcmVmaXgpICsgJz0nICsgZm9ybWF0dGVyKFN0cmluZyhvYmopKV07XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIG9iaktleXM7XG4gICAgaWYgKGlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgICAgaWYgKHNraXBOdWxscyAmJiB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5UHJlZml4ID0gaXNBcnJheShvYmopXG4gICAgICAgICAgICA/IHR5cGVvZiBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnZnVuY3Rpb24nID8gZ2VuZXJhdGVBcnJheVByZWZpeChwcmVmaXgsIGtleSkgOiBwcmVmaXhcbiAgICAgICAgICAgIDogcHJlZml4ICsgKGFsbG93RG90cyA/ICcuJyArIGtleSA6ICdbJyArIGtleSArICddJyk7XG5cbiAgICAgICAgcHVzaFRvQXJyYXkodmFsdWVzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGtleVByZWZpeCxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgICAgICBlbmNvZGVyLFxuICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICAgc29ydCxcbiAgICAgICAgICAgIGFsbG93RG90cyxcbiAgICAgICAgICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgY2hhcnNldFxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzO1xufTtcblxudmFyIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmVuY29kZXIgIT09IG51bGwgJiYgb3B0cy5lbmNvZGVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdHMuZW5jb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbmNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBjaGFyc2V0ID0gb3B0cy5jaGFyc2V0IHx8IGRlZmF1bHRzLmNoYXJzZXQ7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmNoYXJzZXQgIT09ICd1bmRlZmluZWQnICYmIG9wdHMuY2hhcnNldCAhPT0gJ3V0Zi04JyAmJiBvcHRzLmNoYXJzZXQgIT09ICdpc28tODg1OS0xJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzWydkZWZhdWx0J107XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZvcm1hdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKCFoYXMuY2FsbChmb3JtYXRzLmZvcm1hdHRlcnMsIG9wdHMuZm9ybWF0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBmb3JtYXQgb3B0aW9uIHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIGZvcm1hdCA9IG9wdHMuZm9ybWF0O1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgICB2YXIgZmlsdGVyID0gZGVmYXVsdHMuZmlsdGVyO1xuICAgIGlmICh0eXBlb2Ygb3B0cy5maWx0ZXIgPT09ICdmdW5jdGlvbicgfHwgaXNBcnJheShvcHRzLmZpbHRlcikpIHtcbiAgICAgICAgZmlsdGVyID0gb3B0cy5maWx0ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkUXVlcnlQcmVmaXg6IHR5cGVvZiBvcHRzLmFkZFF1ZXJ5UHJlZml4ID09PSAnYm9vbGVhbicgPyBvcHRzLmFkZFF1ZXJ5UHJlZml4IDogZGVmYXVsdHMuYWRkUXVlcnlQcmVmaXgsXG4gICAgICAgIGFsbG93RG90czogdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHMsXG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzLmNoYXJzZXRTZW50aW5lbCxcbiAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuZGVsaW1pdGVyIDogb3B0cy5kZWxpbWl0ZXIsXG4gICAgICAgIGVuY29kZTogdHlwZW9mIG9wdHMuZW5jb2RlID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZSA6IGRlZmF1bHRzLmVuY29kZSxcbiAgICAgICAgZW5jb2RlcjogdHlwZW9mIG9wdHMuZW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZW5jb2RlciA6IGRlZmF1bHRzLmVuY29kZXIsXG4gICAgICAgIGVuY29kZVZhbHVlc09ubHk6IHR5cGVvZiBvcHRzLmVuY29kZVZhbHVlc09ubHkgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlVmFsdWVzT25seSA6IGRlZmF1bHRzLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlcixcbiAgICAgICAgc2VyaWFsaXplRGF0ZTogdHlwZW9mIG9wdHMuc2VyaWFsaXplRGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc2VyaWFsaXplRGF0ZSA6IGRlZmF1bHRzLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgIHNraXBOdWxsczogdHlwZW9mIG9wdHMuc2tpcE51bGxzID09PSAnYm9vbGVhbicgPyBvcHRzLnNraXBOdWxscyA6IGRlZmF1bHRzLnNraXBOdWxscyxcbiAgICAgICAgc29ydDogdHlwZW9mIG9wdHMuc29ydCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc29ydCA6IG51bGwsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZ1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG9wdHMpIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyhvcHRzKTtcblxuICAgIHZhciBvYmpLZXlzO1xuICAgIHZhciBmaWx0ZXI7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmogPSBmaWx0ZXIoJycsIG9iaik7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIGFycmF5Rm9ybWF0O1xuICAgIGlmIChvcHRzICYmIG9wdHMuYXJyYXlGb3JtYXQgaW4gYXJyYXlQcmVmaXhHZW5lcmF0b3JzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5hcnJheUZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKG9wdHMgJiYgJ2luZGljZXMnIGluIG9wdHMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRzLmluZGljZXMgPyAnaW5kaWNlcycgOiAncmVwZWF0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheUZvcm1hdCA9ICdpbmRpY2VzJztcbiAgICB9XG5cbiAgICB2YXIgZ2VuZXJhdGVBcnJheVByZWZpeCA9IGFycmF5UHJlZml4R2VuZXJhdG9yc1thcnJheUZvcm1hdF07XG5cbiAgICBpZiAoIW9iaktleXMpIHtcbiAgICAgICAgb2JqS2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc29ydCkge1xuICAgICAgICBvYmpLZXlzLnNvcnQob3B0aW9ucy5zb3J0KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVG9BcnJheShrZXlzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2tpcE51bGxzLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGUgPyBvcHRpb25zLmVuY29kZXIgOiBudWxsLFxuICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXIsXG4gICAgICAgICAgICBvcHRpb25zLnNvcnQsXG4gICAgICAgICAgICBvcHRpb25zLmFsbG93RG90cyxcbiAgICAgICAgICAgIG9wdGlvbnMuc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgICAgIG9wdGlvbnMuZm9ybWF0dGVyLFxuICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGVWYWx1ZXNPbmx5LFxuICAgICAgICAgICAgb3B0aW9ucy5jaGFyc2V0XG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHZhciBqb2luZWQgPSBrZXlzLmpvaW4ob3B0aW9ucy5kZWxpbWl0ZXIpO1xuICAgIHZhciBwcmVmaXggPSBvcHRpb25zLmFkZFF1ZXJ5UHJlZml4ID09PSB0cnVlID8gJz8nIDogJyc7XG5cbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JyksIHRoZSBcIm51bWVyaWMgZW50aXR5XCIgcmVwcmVzZW50YXRpb24gb2YgYSBjaGVja21hcmtcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lMjYlMjMxMDAwMyUzQiYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCfinJMnKVxuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSVFMiU5QyU5MyYnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGpvaW5lZC5sZW5ndGggPiAwID8gcHJlZml4ICsgam9pbmVkIDogJyc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGhleFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgICAgIGFycmF5LnB1c2goJyUnICsgKChpIDwgMTYgPyAnMCcgOiAnJykgKyBpLnRvU3RyaW5nKDE2KSkudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufSgpKTtcblxudmFyIGNvbXBhY3RRdWV1ZSA9IGZ1bmN0aW9uIGNvbXBhY3RRdWV1ZShxdWV1ZSkge1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWUucG9wKCk7XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHZhciBjb21wYWN0ZWQgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9ialtqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFjdGVkLnB1c2gob2JqW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0ub2JqW2l0ZW0ucHJvcF0gPSBjb21wYWN0ZWQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgYXJyYXlUb09iamVjdCA9IGZ1bmN0aW9uIGFycmF5VG9PYmplY3Qoc291cmNlLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBvYmpbaV0gPSBzb3VyY2VbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIG1lcmdlID0gZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IDAgKi9cbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXQucHVzaChzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKChvcHRpb25zICYmIChvcHRpb25zLnBsYWluT2JqZWN0cyB8fCBvcHRpb25zLmFsbG93UHJvdG90eXBlcykpIHx8ICFoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0YXJnZXQsIHNvdXJjZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0IHx8IHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBbdGFyZ2V0XS5jb25jYXQoc291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgbWVyZ2VUYXJnZXQgPSB0YXJnZXQ7XG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiAhaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIG1lcmdlVGFyZ2V0ID0gYXJyYXlUb09iamVjdCh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICBpZiAoaGFzLmNhbGwodGFyZ2V0LCBpKSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRJdGVtID0gdGFyZ2V0W2ldO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRJdGVtICYmIHR5cGVvZiB0YXJnZXRJdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBtZXJnZSh0YXJnZXRJdGVtLCBpdGVtLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG5cbiAgICAgICAgaWYgKGhhcy5jYWxsKGFjYywga2V5KSkge1xuICAgICAgICAgICAgYWNjW2tleV0gPSBtZXJnZShhY2Nba2V5XSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG1lcmdlVGFyZ2V0KTtcbn07XG5cbnZhciBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ25TaW5nbGVTb3VyY2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgdGFyZ2V0KTtcbn07XG5cbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAoc3RyLCBkZWNvZGVyLCBjaGFyc2V0KSB7XG4gICAgdmFyIHN0cldpdGhvdXRQbHVzID0gc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgLy8gdW5lc2NhcGUgbmV2ZXIgdGhyb3dzLCBubyB0cnkuLi5jYXRjaCBuZWVkZWQ6XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cy5yZXBsYWNlKC8lWzAtOWEtZl17Mn0vZ2ksIHVuZXNjYXBlKTtcbiAgICB9XG4gICAgLy8gdXRmLThcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cldpdGhvdXRQbHVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cztcbiAgICB9XG59O1xuXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKHN0ciwgZGVmYXVsdEVuY29kZXIsIGNoYXJzZXQpIHtcbiAgICAvLyBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgd3JpdHRlbiBieSBCcmlhbiBXaGl0ZSAobXNjZGV4KSBmb3IgdGhlIGlvLmpzIGNvcmUgcXVlcnlzdHJpbmcgbGlicmFyeS5cbiAgICAvLyBJdCBoYXMgYmVlbiBhZGFwdGVkIGhlcmUgZm9yIHN0cmljdGVyIGFkaGVyZW5jZSB0byBSRkMgMzk4NlxuICAgIGlmIChzdHIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgdmFyIHN0cmluZyA9IHN0cjtcbiAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgc3RyaW5nID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN0cik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICBzdHJpbmcgPSBTdHJpbmcoc3RyKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHJldHVybiBlc2NhcGUoc3RyaW5nKS5yZXBsYWNlKC8ldVswLTlhLWZdezR9L2dpLCBmdW5jdGlvbiAoJDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJTI2JTIzJyArIHBhcnNlSW50KCQwLnNsaWNlKDIpLCAxNikgKyAnJTNCJztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG91dCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBjID0gc3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgYyA9PT0gMHgyRCAvLyAtXG4gICAgICAgICAgICB8fCBjID09PSAweDJFIC8vIC5cbiAgICAgICAgICAgIHx8IGMgPT09IDB4NUYgLy8gX1xuICAgICAgICAgICAgfHwgYyA9PT0gMHg3RSAvLyB+XG4gICAgICAgICAgICB8fCAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgLy8gMC05XG4gICAgICAgICAgICB8fCAoYyA+PSAweDQxICYmIGMgPD0gMHg1QSkgLy8gYS16XG4gICAgICAgICAgICB8fCAoYyA+PSAweDYxICYmIGMgPD0gMHg3QSkgLy8gQS1aXG4gICAgICAgICkge1xuICAgICAgICAgICAgb3V0ICs9IHN0cmluZy5jaGFyQXQoaSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgaGV4VGFibGVbY107XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEMwIHwgKGMgPj4gNildICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEUwIHwgKGMgPj4gMTIpXSArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M0ZGKSA8PCAxMCkgfCAoc3RyaW5nLmNoYXJDb2RlQXQoaSkgJiAweDNGRikpO1xuICAgICAgICBvdXQgKz0gaGV4VGFibGVbMHhGMCB8IChjID4+IDE4KV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiAxMikgJiAweDNGKV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiA2KSAmIDB4M0YpXVxuICAgICAgICAgICAgKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbn07XG5cbnZhciBjb21wYWN0ID0gZnVuY3Rpb24gY29tcGFjdCh2YWx1ZSkge1xuICAgIHZhciBxdWV1ZSA9IFt7IG9iajogeyBvOiB2YWx1ZSB9LCBwcm9wOiAnbycgfV07XG4gICAgdmFyIHJlZnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZVtpXTtcbiAgICAgICAgdmFyIG9iaiA9IGl0ZW0ub2JqW2l0ZW0ucHJvcF07XG5cbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiByZWZzLmluZGV4T2YodmFsKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKHsgb2JqOiBvYmosIHByb3A6IGtleSB9KTtcbiAgICAgICAgICAgICAgICByZWZzLnB1c2godmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBhY3RRdWV1ZShxdWV1ZSk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgaXNSZWdFeHAgPSBmdW5jdGlvbiBpc1JlZ0V4cChvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufTtcblxudmFyIGlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhIShvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopKTtcbn07XG5cbnZhciBjb21iaW5lID0gZnVuY3Rpb24gY29tYmluZShhLCBiKSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdChhLCBiKTtcbn07XG5cbnZhciBtYXliZU1hcCA9IGZ1bmN0aW9uIG1heWJlTWFwKHZhbCwgZm4pIHtcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhciBtYXBwZWQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG1hcHBlZC5wdXNoKGZuKHZhbFtpXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXBwZWQ7XG4gICAgfVxuICAgIHJldHVybiBmbih2YWwpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgYXJyYXlUb09iamVjdDogYXJyYXlUb09iamVjdCxcbiAgICBhc3NpZ246IGFzc2lnbixcbiAgICBjb21iaW5lOiBjb21iaW5lLFxuICAgIGNvbXBhY3Q6IGNvbXBhY3QsXG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgZW5jb2RlOiBlbmNvZGUsXG4gICAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICAgIGlzUmVnRXhwOiBpc1JlZ0V4cCxcbiAgICBtYXliZU1hcDogbWF5YmVNYXAsXG4gICAgbWVyZ2U6IG1lcmdlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxuICAsIHVuZGVmO1xuXG4vKipcbiAqIERlY29kZSBhIFVSSSBlbmNvZGVkIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFVSSSBlbmNvZGVkIHN0cmluZy5cbiAqIEByZXR1cm5zIHtTdHJpbmd8TnVsbH0gVGhlIGRlY29kZWQgc3RyaW5nLlxuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQucmVwbGFjZSgvXFwrL2csICcgJykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byBlbmNvZGUgYSBnaXZlbiBpbnB1dC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyB0aGF0IG5lZWRzIHRvIGJlIGVuY29kZWQuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGlucHV0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogU2ltcGxlIHF1ZXJ5IHN0cmluZyBwYXJzZXIuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHF1ZXJ5IFRoZSBxdWVyeSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBwYXJzZWQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmcocXVlcnkpIHtcbiAgdmFyIHBhcnNlciA9IC8oW149PyZdKyk9PyhbXiZdKikvZ1xuICAgICwgcmVzdWx0ID0ge31cbiAgICAsIHBhcnQ7XG5cbiAgd2hpbGUgKHBhcnQgPSBwYXJzZXIuZXhlYyhxdWVyeSkpIHtcbiAgICB2YXIga2V5ID0gZGVjb2RlKHBhcnRbMV0pXG4gICAgICAsIHZhbHVlID0gZGVjb2RlKHBhcnRbMl0pO1xuXG4gICAgLy9cbiAgICAvLyBQcmV2ZW50IG92ZXJyaWRpbmcgb2YgZXhpc3RpbmcgcHJvcGVydGllcy4gVGhpcyBlbnN1cmVzIHRoYXQgYnVpbGQtaW5cbiAgICAvLyBtZXRob2RzIGxpa2UgYHRvU3RyaW5nYCBvciBfX3Byb3RvX18gYXJlIG5vdCBvdmVycmlkZW4gYnkgbWFsaWNpb3VzXG4gICAgLy8gcXVlcnlzdHJpbmdzLlxuICAgIC8vXG4gICAgLy8gSW4gdGhlIGNhc2UgaWYgZmFpbGVkIGRlY29kaW5nLCB3ZSB3YW50IHRvIG9taXQgdGhlIGtleS92YWx1ZSBwYWlyc1xuICAgIC8vIGZyb20gdGhlIHJlc3VsdC5cbiAgICAvL1xuICAgIGlmIChrZXkgPT09IG51bGwgfHwgdmFsdWUgPT09IG51bGwgfHwga2V5IGluIHJlc3VsdCkgY29udGludWU7XG4gICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgcXVlcnkgc3RyaW5nIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB0aGF0IHNob3VsZCBiZSB0cmFuc2Zvcm1lZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVmaXggT3B0aW9uYWwgcHJlZml4LlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5naWZ5KG9iaiwgcHJlZml4KSB7XG4gIHByZWZpeCA9IHByZWZpeCB8fCAnJztcblxuICB2YXIgcGFpcnMgPSBbXVxuICAgICwgdmFsdWVcbiAgICAsIGtleTtcblxuICAvL1xuICAvLyBPcHRpb25hbGx5IHByZWZpeCB3aXRoIGEgJz8nIGlmIG5lZWRlZFxuICAvL1xuICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBwcmVmaXgpIHByZWZpeCA9ICc/JztcblxuICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICB2YWx1ZSA9IG9ialtrZXldO1xuXG4gICAgICAvL1xuICAgICAgLy8gRWRnZSBjYXNlcyB3aGVyZSB3ZSBhY3R1YWxseSB3YW50IHRvIGVuY29kZSB0aGUgdmFsdWUgdG8gYW4gZW1wdHlcbiAgICAgIC8vIHN0cmluZyBpbnN0ZWFkIG9mIHRoZSBzdHJpbmdpZmllZCB2YWx1ZS5cbiAgICAgIC8vXG4gICAgICBpZiAoIXZhbHVlICYmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWYgfHwgaXNOYU4odmFsdWUpKSkge1xuICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KTtcbiAgICAgIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblxuICAgICAgLy9cbiAgICAgIC8vIElmIHdlIGZhaWxlZCB0byBlbmNvZGUgdGhlIHN0cmluZ3MsIHdlIHNob3VsZCBiYWlsIG91dCBhcyB3ZSBkb24ndFxuICAgICAgLy8gd2FudCB0byBhZGQgaW52YWxpZCBzdHJpbmdzIHRvIHRoZSBxdWVyeS5cbiAgICAgIC8vXG4gICAgICBpZiAoa2V5ID09PSBudWxsIHx8IHZhbHVlID09PSBudWxsKSBjb250aW51ZTtcbiAgICAgIHBhaXJzLnB1c2goa2V5ICsnPScrIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFpcnMubGVuZ3RoID8gcHJlZml4ICsgcGFpcnMuam9pbignJicpIDogJyc7XG59XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5leHBvcnRzLnN0cmluZ2lmeSA9IHF1ZXJ5c3RyaW5naWZ5O1xuZXhwb3J0cy5wYXJzZSA9IHF1ZXJ5c3RyaW5nO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDaGVjayBpZiB3ZSdyZSByZXF1aXJlZCB0byBhZGQgYSBwb3J0IG51bWJlci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZGVmYXVsdC1wb3J0XG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHBvcnQgUG9ydCBudW1iZXIgd2UgbmVlZCB0byBjaGVja1xuICogQHBhcmFtIHtTdHJpbmd9IHByb3RvY29sIFByb3RvY29sIHdlIG5lZWQgdG8gY2hlY2sgYWdhaW5zdC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBJcyBpdCBhIGRlZmF1bHQgcG9ydCBmb3IgdGhlIGdpdmVuIHByb3RvY29sXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXF1aXJlZChwb3J0LCBwcm90b2NvbCkge1xuICBwcm90b2NvbCA9IHByb3RvY29sLnNwbGl0KCc6JylbMF07XG4gIHBvcnQgPSArcG9ydDtcblxuICBpZiAoIXBvcnQpIHJldHVybiBmYWxzZTtcblxuICBzd2l0Y2ggKHByb3RvY29sKSB7XG4gICAgY2FzZSAnaHR0cCc6XG4gICAgY2FzZSAnd3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA4MDtcblxuICAgIGNhc2UgJ2h0dHBzJzpcbiAgICBjYXNlICd3c3MnOlxuICAgIHJldHVybiBwb3J0ICE9PSA0NDM7XG5cbiAgICBjYXNlICdmdHAnOlxuICAgIHJldHVybiBwb3J0ICE9PSAyMTtcblxuICAgIGNhc2UgJ2dvcGhlcic6XG4gICAgcmV0dXJuIHBvcnQgIT09IDcwO1xuXG4gICAgY2FzZSAnZmlsZSc6XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHBvcnQgIT09IDA7XG59O1xuIiwiKGZ1bmN0aW9uIChuYW1lLCBjb250ZXh0LCBkZWZpbml0aW9uKSB7XG4gIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7XG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKGRlZmluaXRpb24pO1xuICBlbHNlIGNvbnRleHRbbmFtZV0gPSBkZWZpbml0aW9uKCk7XG59KSgndXJsam9pbicsIHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuICBmdW5jdGlvbiBub3JtYWxpemUgKHN0ckFycmF5KSB7XG4gICAgdmFyIHJlc3VsdEFycmF5ID0gW107XG4gICAgaWYgKHN0ckFycmF5Lmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJyc7IH1cblxuICAgIGlmICh0eXBlb2Ygc3RyQXJyYXlbMF0gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVcmwgbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQgJyArIHN0ckFycmF5WzBdKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgZmlyc3QgcGFydCBpcyBhIHBsYWluIHByb3RvY29sLCB3ZSBjb21iaW5lIGl0IHdpdGggdGhlIG5leHQgcGFydC5cbiAgICBpZiAoc3RyQXJyYXlbMF0ubWF0Y2goL15bXi86XSs6XFwvKiQvKSAmJiBzdHJBcnJheS5sZW5ndGggPiAxKSB7XG4gICAgICB2YXIgZmlyc3QgPSBzdHJBcnJheS5zaGlmdCgpO1xuICAgICAgc3RyQXJyYXlbMF0gPSBmaXJzdCArIHN0ckFycmF5WzBdO1xuICAgIH1cblxuICAgIC8vIFRoZXJlIG11c3QgYmUgdHdvIG9yIHRocmVlIHNsYXNoZXMgaW4gdGhlIGZpbGUgcHJvdG9jb2wsIHR3byBzbGFzaGVzIGluIGFueXRoaW5nIGVsc2UuXG4gICAgaWYgKHN0ckFycmF5WzBdLm1hdGNoKC9eZmlsZTpcXC9cXC9cXC8vKSkge1xuICAgICAgc3RyQXJyYXlbMF0gPSBzdHJBcnJheVswXS5yZXBsYWNlKC9eKFteLzpdKyk6XFwvKi8sICckMTovLy8nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyQXJyYXlbMF0gPSBzdHJBcnJheVswXS5yZXBsYWNlKC9eKFteLzpdKyk6XFwvKi8sICckMTovLycpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjb21wb25lbnQgPSBzdHJBcnJheVtpXTtcblxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VybCBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZCAnICsgY29tcG9uZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvbmVudCA9PT0gJycpIHsgY29udGludWU7IH1cblxuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIC8vIFJlbW92aW5nIHRoZSBzdGFydGluZyBzbGFzaGVzIGZvciBlYWNoIGNvbXBvbmVudCBidXQgdGhlIGZpcnN0LlxuICAgICAgICBjb21wb25lbnQgPSBjb21wb25lbnQucmVwbGFjZSgvXltcXC9dKy8sICcnKTtcbiAgICAgIH1cbiAgICAgIGlmIChpIDwgc3RyQXJyYXkubGVuZ3RoIC0gMSkge1xuICAgICAgICAvLyBSZW1vdmluZyB0aGUgZW5kaW5nIHNsYXNoZXMgZm9yIGVhY2ggY29tcG9uZW50IGJ1dCB0aGUgbGFzdC5cbiAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50LnJlcGxhY2UoL1tcXC9dKyQvLCAnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3IgdGhlIGxhc3QgY29tcG9uZW50IHdlIHdpbGwgY29tYmluZSBtdWx0aXBsZSBzbGFzaGVzIHRvIGEgc2luZ2xlIG9uZS5cbiAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50LnJlcGxhY2UoL1tcXC9dKyQvLCAnLycpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRBcnJheS5wdXNoKGNvbXBvbmVudCk7XG5cbiAgICB9XG5cbiAgICB2YXIgc3RyID0gcmVzdWx0QXJyYXkuam9pbignLycpO1xuICAgIC8vIEVhY2ggaW5wdXQgY29tcG9uZW50IGlzIG5vdyBzZXBhcmF0ZWQgYnkgYSBzaW5nbGUgc2xhc2ggZXhjZXB0IHRoZSBwb3NzaWJsZSBmaXJzdCBwbGFpbiBwcm90b2NvbCBwYXJ0LlxuXG4gICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNsYXNoIGJlZm9yZSBwYXJhbWV0ZXJzIG9yIGhhc2hcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFwvKFxcP3wmfCNbXiFdKS9nLCAnJDEnKTtcblxuICAgIC8vIHJlcGxhY2UgPyBpbiBwYXJhbWV0ZXJzIHdpdGggJlxuICAgIHZhciBwYXJ0cyA9IHN0ci5zcGxpdCgnPycpO1xuICAgIHN0ciA9IHBhcnRzLnNoaWZ0KCkgKyAocGFydHMubGVuZ3RoID4gMCA/ICc/JzogJycpICsgcGFydHMuam9pbignJicpO1xuXG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlucHV0O1xuXG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgICBpbnB1dCA9IGFyZ3VtZW50c1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vcm1hbGl6ZShpbnB1dCk7XG4gIH07XG5cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVxdWlyZWQgPSByZXF1aXJlKCdyZXF1aXJlcy1wb3J0JylcbiAgLCBxcyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5naWZ5JylcbiAgLCBzbGFzaGVzID0gL15bQS1aYS16XVtBLVphLXowLTkrLS5dKjpcXC9cXC8vXG4gICwgcHJvdG9jb2xyZSA9IC9eKFthLXpdW2EtejAtOS4rLV0qOik/KFxcL1xcLyk/KFtcXFNcXHNdKikvaVxuICAsIHdoaXRlc3BhY2UgPSAnW1xcXFx4MDlcXFxceDBBXFxcXHgwQlxcXFx4MENcXFxceDBEXFxcXHgyMFxcXFx4QTBcXFxcdTE2ODBcXFxcdTE4MEVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMEFcXFxcdTIwMkZcXFxcdTIwNUZcXFxcdTMwMDBcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdUZFRkZdJ1xuICAsIGxlZnQgPSBuZXcgUmVnRXhwKCdeJysgd2hpdGVzcGFjZSArJysnKTtcblxuLyoqXG4gKiBUcmltIGEgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgU3RyaW5nIHRvIHRyaW0uXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRyaW1MZWZ0KHN0cikge1xuICByZXR1cm4gKHN0ciA/IHN0ciA6ICcnKS50b1N0cmluZygpLnJlcGxhY2UobGVmdCwgJycpO1xufVxuXG4vKipcbiAqIFRoZXNlIGFyZSB0aGUgcGFyc2UgcnVsZXMgZm9yIHRoZSBVUkwgcGFyc2VyLCBpdCBpbmZvcm1zIHRoZSBwYXJzZXJcbiAqIGFib3V0OlxuICpcbiAqIDAuIFRoZSBjaGFyIGl0IE5lZWRzIHRvIHBhcnNlLCBpZiBpdCdzIGEgc3RyaW5nIGl0IHNob3VsZCBiZSBkb25lIHVzaW5nXG4gKiAgICBpbmRleE9mLCBSZWdFeHAgdXNpbmcgZXhlYyBhbmQgTmFOIG1lYW5zIHNldCBhcyBjdXJyZW50IHZhbHVlLlxuICogMS4gVGhlIHByb3BlcnR5IHdlIHNob3VsZCBzZXQgd2hlbiBwYXJzaW5nIHRoaXMgdmFsdWUuXG4gKiAyLiBJbmRpY2F0aW9uIGlmIGl0J3MgYmFja3dhcmRzIG9yIGZvcndhcmQgcGFyc2luZywgd2hlbiBzZXQgYXMgbnVtYmVyIGl0J3NcbiAqICAgIHRoZSB2YWx1ZSBvZiBleHRyYSBjaGFycyB0aGF0IHNob3VsZCBiZSBzcGxpdCBvZmYuXG4gKiAzLiBJbmhlcml0IGZyb20gbG9jYXRpb24gaWYgbm9uIGV4aXN0aW5nIGluIHRoZSBwYXJzZXIuXG4gKiA0LiBgdG9Mb3dlckNhc2VgIHRoZSByZXN1bHRpbmcgdmFsdWUuXG4gKi9cbnZhciBydWxlcyA9IFtcbiAgWycjJywgJ2hhc2gnXSwgICAgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnPycsICdxdWVyeSddLCAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBmdW5jdGlvbiBzYW5pdGl6ZShhZGRyZXNzKSB7ICAgICAgICAgIC8vIFNhbml0aXplIHdoYXQgaXMgbGVmdCBvZiB0aGUgYWRkcmVzc1xuICAgIHJldHVybiBhZGRyZXNzLnJlcGxhY2UoJ1xcXFwnLCAnLycpO1xuICB9LFxuICBbJy8nLCAncGF0aG5hbWUnXSwgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgWydAJywgJ2F1dGgnLCAxXSwgICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGZyb250LlxuICBbTmFOLCAnaG9zdCcsIHVuZGVmaW5lZCwgMSwgMV0sICAgICAgIC8vIFNldCBsZWZ0IG92ZXIgdmFsdWUuXG4gIFsvOihcXGQrKSQvLCAncG9ydCcsIHVuZGVmaW5lZCwgMV0sICAgIC8vIFJlZ0V4cCB0aGUgYmFjay5cbiAgW05hTiwgJ2hvc3RuYW1lJywgdW5kZWZpbmVkLCAxLCAxXSAgICAvLyBTZXQgbGVmdCBvdmVyLlxuXTtcblxuLyoqXG4gKiBUaGVzZSBwcm9wZXJ0aWVzIHNob3VsZCBub3QgYmUgY29waWVkIG9yIGluaGVyaXRlZCBmcm9tLiBUaGlzIGlzIG9ubHkgbmVlZGVkXG4gKiBmb3IgYWxsIG5vbiBibG9iIFVSTCdzIGFzIGEgYmxvYiBVUkwgZG9lcyBub3QgaW5jbHVkZSBhIGhhc2gsIG9ubHkgdGhlXG4gKiBvcmlnaW4uXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbnZhciBpZ25vcmUgPSB7IGhhc2g6IDEsIHF1ZXJ5OiAxIH07XG5cbi8qKlxuICogVGhlIGxvY2F0aW9uIG9iamVjdCBkaWZmZXJzIHdoZW4geW91ciBjb2RlIGlzIGxvYWRlZCB0aHJvdWdoIGEgbm9ybWFsIHBhZ2UsXG4gKiBXb3JrZXIgb3IgdGhyb3VnaCBhIHdvcmtlciB1c2luZyBhIGJsb2IuIEFuZCB3aXRoIHRoZSBibG9iYmxlIGJlZ2lucyB0aGVcbiAqIHRyb3VibGUgYXMgdGhlIGxvY2F0aW9uIG9iamVjdCB3aWxsIGNvbnRhaW4gdGhlIFVSTCBvZiB0aGUgYmxvYiwgbm90IHRoZVxuICogbG9jYXRpb24gb2YgdGhlIHBhZ2Ugd2hlcmUgb3VyIGNvZGUgaXMgbG9hZGVkIGluLiBUaGUgYWN0dWFsIG9yaWdpbiBpc1xuICogZW5jb2RlZCBpbiB0aGUgYHBhdGhuYW1lYCBzbyB3ZSBjYW4gdGhhbmtmdWxseSBnZW5lcmF0ZSBhIGdvb2QgXCJkZWZhdWx0XCJcbiAqIGxvY2F0aW9uIGZyb20gaXQgc28gd2UgY2FuIGdlbmVyYXRlIHByb3BlciByZWxhdGl2ZSBVUkwncyBhZ2Fpbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGxvYyBPcHRpb25hbCBkZWZhdWx0IGxvY2F0aW9uIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IGxvbGNhdGlvbiBvYmplY3QuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIGxvbGNhdGlvbihsb2MpIHtcbiAgdmFyIGdsb2JhbFZhcjtcblxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIGdsb2JhbFZhciA9IHdpbmRvdztcbiAgZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIGdsb2JhbFZhciA9IGdsb2JhbDtcbiAgZWxzZSBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSBnbG9iYWxWYXIgPSBzZWxmO1xuICBlbHNlIGdsb2JhbFZhciA9IHt9O1xuXG4gIHZhciBsb2NhdGlvbiA9IGdsb2JhbFZhci5sb2NhdGlvbiB8fCB7fTtcbiAgbG9jID0gbG9jIHx8IGxvY2F0aW9uO1xuXG4gIHZhciBmaW5hbGRlc3RpbmF0aW9uID0ge31cbiAgICAsIHR5cGUgPSB0eXBlb2YgbG9jXG4gICAgLCBrZXk7XG5cbiAgaWYgKCdibG9iOicgPT09IGxvYy5wcm90b2NvbCkge1xuICAgIGZpbmFsZGVzdGluYXRpb24gPSBuZXcgVXJsKHVuZXNjYXBlKGxvYy5wYXRobmFtZSksIHt9KTtcbiAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZSkge1xuICAgIGZpbmFsZGVzdGluYXRpb24gPSBuZXcgVXJsKGxvYywge30pO1xuICAgIGZvciAoa2V5IGluIGlnbm9yZSkgZGVsZXRlIGZpbmFsZGVzdGluYXRpb25ba2V5XTtcbiAgfSBlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZSkge1xuICAgIGZvciAoa2V5IGluIGxvYykge1xuICAgICAgaWYgKGtleSBpbiBpZ25vcmUpIGNvbnRpbnVlO1xuICAgICAgZmluYWxkZXN0aW5hdGlvbltrZXldID0gbG9jW2tleV07XG4gICAgfVxuXG4gICAgaWYgKGZpbmFsZGVzdGluYXRpb24uc2xhc2hlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmaW5hbGRlc3RpbmF0aW9uLnNsYXNoZXMgPSBzbGFzaGVzLnRlc3QobG9jLmhyZWYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaW5hbGRlc3RpbmF0aW9uO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIFByb3RvY29sRXh0cmFjdFxuICogQHR5cGUgT2JqZWN0XG4gKiBAcHJvcGVydHkge1N0cmluZ30gcHJvdG9jb2wgUHJvdG9jb2wgbWF0Y2hlZCBpbiB0aGUgVVJMLCBpbiBsb3dlcmNhc2UuXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IHNsYXNoZXMgYHRydWVgIGlmIHByb3RvY29sIGlzIGZvbGxvd2VkIGJ5IFwiLy9cIiwgZWxzZSBgZmFsc2VgLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHJlc3QgUmVzdCBvZiB0aGUgVVJMIHRoYXQgaXMgbm90IHBhcnQgb2YgdGhlIHByb3RvY29sLlxuICovXG5cbi8qKlxuICogRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBmcm9tIGEgVVJMIHdpdGgvd2l0aG91dCBkb3VibGUgc2xhc2ggKFwiLy9cIikuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgVVJMIHdlIHdhbnQgdG8gZXh0cmFjdCBmcm9tLlxuICogQHJldHVybiB7UHJvdG9jb2xFeHRyYWN0fSBFeHRyYWN0ZWQgaW5mb3JtYXRpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBleHRyYWN0UHJvdG9jb2woYWRkcmVzcykge1xuICBhZGRyZXNzID0gdHJpbUxlZnQoYWRkcmVzcyk7XG4gIHZhciBtYXRjaCA9IHByb3RvY29scmUuZXhlYyhhZGRyZXNzKTtcblxuICByZXR1cm4ge1xuICAgIHByb3RvY29sOiBtYXRjaFsxXSA/IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgOiAnJyxcbiAgICBzbGFzaGVzOiAhIW1hdGNoWzJdLFxuICAgIHJlc3Q6IG1hdGNoWzNdXG4gIH07XG59XG5cbi8qKlxuICogUmVzb2x2ZSBhIHJlbGF0aXZlIFVSTCBwYXRobmFtZSBhZ2FpbnN0IGEgYmFzZSBVUkwgcGF0aG5hbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlbGF0aXZlIFBhdGhuYW1lIG9mIHRoZSByZWxhdGl2ZSBVUkwuXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZSBQYXRobmFtZSBvZiB0aGUgYmFzZSBVUkwuXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJlc29sdmVkIHBhdGhuYW1lLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZShyZWxhdGl2ZSwgYmFzZSkge1xuICBpZiAocmVsYXRpdmUgPT09ICcnKSByZXR1cm4gYmFzZTtcblxuICB2YXIgcGF0aCA9IChiYXNlIHx8ICcvJykuc3BsaXQoJy8nKS5zbGljZSgwLCAtMSkuY29uY2F0KHJlbGF0aXZlLnNwbGl0KCcvJykpXG4gICAgLCBpID0gcGF0aC5sZW5ndGhcbiAgICAsIGxhc3QgPSBwYXRoW2kgLSAxXVxuICAgICwgdW5zaGlmdCA9IGZhbHNlXG4gICAgLCB1cCA9IDA7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChwYXRoW2ldID09PSAnLicpIHtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAocGF0aFtpXSA9PT0gJy4uJykge1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIGlmIChpID09PSAwKSB1bnNoaWZ0ID0gdHJ1ZTtcbiAgICAgIHBhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5zaGlmdCkgcGF0aC51bnNoaWZ0KCcnKTtcbiAgaWYgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSBwYXRoLnB1c2goJycpO1xuXG4gIHJldHVybiBwYXRoLmpvaW4oJy8nKTtcbn1cblxuLyoqXG4gKiBUaGUgYWN0dWFsIFVSTCBpbnN0YW5jZS4gSW5zdGVhZCBvZiByZXR1cm5pbmcgYW4gb2JqZWN0IHdlJ3ZlIG9wdGVkLWluIHRvXG4gKiBjcmVhdGUgYW4gYWN0dWFsIGNvbnN0cnVjdG9yIGFzIGl0J3MgbXVjaCBtb3JlIG1lbW9yeSBlZmZpY2llbnQgYW5kXG4gKiBmYXN0ZXIgYW5kIGl0IHBsZWFzZXMgbXkgT0NELlxuICpcbiAqIEl0IGlzIHdvcnRoIG5vdGluZyB0aGF0IHdlIHNob3VsZCBub3QgdXNlIGBVUkxgIGFzIGNsYXNzIG5hbWUgdG8gcHJldmVudFxuICogY2xhc2hlcyB3aXRoIHRoZSBnbG9iYWwgVVJMIGluc3RhbmNlIHRoYXQgZ290IGludHJvZHVjZWQgaW4gYnJvd3NlcnMuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gW2xvY2F0aW9uXSBMb2NhdGlvbiBkZWZhdWx0cyBmb3IgcmVsYXRpdmUgcGF0aHMuXG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IFtwYXJzZXJdIFBhcnNlciBmb3IgdGhlIHF1ZXJ5IHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIFVybChhZGRyZXNzLCBsb2NhdGlvbiwgcGFyc2VyKSB7XG4gIGFkZHJlc3MgPSB0cmltTGVmdChhZGRyZXNzKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJsKSkge1xuICAgIHJldHVybiBuZXcgVXJsKGFkZHJlc3MsIGxvY2F0aW9uLCBwYXJzZXIpO1xuICB9XG5cbiAgdmFyIHJlbGF0aXZlLCBleHRyYWN0ZWQsIHBhcnNlLCBpbnN0cnVjdGlvbiwgaW5kZXgsIGtleVxuICAgICwgaW5zdHJ1Y3Rpb25zID0gcnVsZXMuc2xpY2UoKVxuICAgICwgdHlwZSA9IHR5cGVvZiBsb2NhdGlvblxuICAgICwgdXJsID0gdGhpc1xuICAgICwgaSA9IDA7XG5cbiAgLy9cbiAgLy8gVGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnRzIGFsbG93cyB0aGlzIG1vZHVsZSB0d28gaGF2ZSBjb21wYXRpYmlsaXR5IHdpdGhcbiAgLy8gMiBkaWZmZXJlbnQgQVBJOlxuICAvL1xuICAvLyAxLiBOb2RlLmpzJ3MgYHVybC5wYXJzZWAgYXBpIHdoaWNoIGFjY2VwdHMgYSBVUkwsIGJvb2xlYW4gYXMgYXJndW1lbnRzXG4gIC8vICAgIHdoZXJlIHRoZSBib29sZWFuIGluZGljYXRlcyB0aGF0IHRoZSBxdWVyeSBzdHJpbmcgc2hvdWxkIGFsc28gYmUgcGFyc2VkLlxuICAvL1xuICAvLyAyLiBUaGUgYFVSTGAgaW50ZXJmYWNlIG9mIHRoZSBicm93c2VyIHdoaWNoIGFjY2VwdHMgYSBVUkwsIG9iamVjdCBhc1xuICAvLyAgICBhcmd1bWVudHMuIFRoZSBzdXBwbGllZCBvYmplY3Qgd2lsbCBiZSB1c2VkIGFzIGRlZmF1bHQgdmFsdWVzIC8gZmFsbC1iYWNrXG4gIC8vICAgIGZvciByZWxhdGl2ZSBwYXRocy5cbiAgLy9cbiAgaWYgKCdvYmplY3QnICE9PSB0eXBlICYmICdzdHJpbmcnICE9PSB0eXBlKSB7XG4gICAgcGFyc2VyID0gbG9jYXRpb247XG4gICAgbG9jYXRpb24gPSBudWxsO1xuICB9XG5cbiAgaWYgKHBhcnNlciAmJiAnZnVuY3Rpb24nICE9PSB0eXBlb2YgcGFyc2VyKSBwYXJzZXIgPSBxcy5wYXJzZTtcblxuICBsb2NhdGlvbiA9IGxvbGNhdGlvbihsb2NhdGlvbik7XG5cbiAgLy9cbiAgLy8gRXh0cmFjdCBwcm90b2NvbCBpbmZvcm1hdGlvbiBiZWZvcmUgcnVubmluZyB0aGUgaW5zdHJ1Y3Rpb25zLlxuICAvL1xuICBleHRyYWN0ZWQgPSBleHRyYWN0UHJvdG9jb2woYWRkcmVzcyB8fCAnJyk7XG4gIHJlbGF0aXZlID0gIWV4dHJhY3RlZC5wcm90b2NvbCAmJiAhZXh0cmFjdGVkLnNsYXNoZXM7XG4gIHVybC5zbGFzaGVzID0gZXh0cmFjdGVkLnNsYXNoZXMgfHwgcmVsYXRpdmUgJiYgbG9jYXRpb24uc2xhc2hlcztcbiAgdXJsLnByb3RvY29sID0gZXh0cmFjdGVkLnByb3RvY29sIHx8IGxvY2F0aW9uLnByb3RvY29sIHx8ICcnO1xuICBhZGRyZXNzID0gZXh0cmFjdGVkLnJlc3Q7XG5cbiAgLy9cbiAgLy8gV2hlbiB0aGUgYXV0aG9yaXR5IGNvbXBvbmVudCBpcyBhYnNlbnQgdGhlIFVSTCBzdGFydHMgd2l0aCBhIHBhdGhcbiAgLy8gY29tcG9uZW50LlxuICAvL1xuICBpZiAoIWV4dHJhY3RlZC5zbGFzaGVzKSBpbnN0cnVjdGlvbnNbM10gPSBbLyguKikvLCAncGF0aG5hbWUnXTtcblxuICBmb3IgKDsgaSA8IGluc3RydWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zW2ldO1xuXG4gICAgaWYgKHR5cGVvZiBpbnN0cnVjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYWRkcmVzcyA9IGluc3RydWN0aW9uKGFkZHJlc3MpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcGFyc2UgPSBpbnN0cnVjdGlvblswXTtcbiAgICBrZXkgPSBpbnN0cnVjdGlvblsxXTtcblxuICAgIGlmIChwYXJzZSAhPT0gcGFyc2UpIHtcbiAgICAgIHVybFtrZXldID0gYWRkcmVzcztcbiAgICB9IGVsc2UgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgcGFyc2UpIHtcbiAgICAgIGlmICh+KGluZGV4ID0gYWRkcmVzcy5pbmRleE9mKHBhcnNlKSkpIHtcbiAgICAgICAgaWYgKCdudW1iZXInID09PSB0eXBlb2YgaW5zdHJ1Y3Rpb25bMl0pIHtcbiAgICAgICAgICB1cmxba2V5XSA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKGluZGV4ICsgaW5zdHJ1Y3Rpb25bMl0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybFtrZXldID0gYWRkcmVzcy5zbGljZShpbmRleCk7XG4gICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgoaW5kZXggPSBwYXJzZS5leGVjKGFkZHJlc3MpKSkge1xuICAgICAgdXJsW2tleV0gPSBpbmRleFsxXTtcbiAgICAgIGFkZHJlc3MgPSBhZGRyZXNzLnNsaWNlKDAsIGluZGV4LmluZGV4KTtcbiAgICB9XG5cbiAgICB1cmxba2V5XSA9IHVybFtrZXldIHx8IChcbiAgICAgIHJlbGF0aXZlICYmIGluc3RydWN0aW9uWzNdID8gbG9jYXRpb25ba2V5XSB8fCAnJyA6ICcnXG4gICAgKTtcblxuICAgIC8vXG4gICAgLy8gSG9zdG5hbWUsIGhvc3QgYW5kIHByb3RvY29sIHNob3VsZCBiZSBsb3dlcmNhc2VkIHNvIHRoZXkgY2FuIGJlIHVzZWQgdG9cbiAgICAvLyBjcmVhdGUgYSBwcm9wZXIgYG9yaWdpbmAuXG4gICAgLy9cbiAgICBpZiAoaW5zdHJ1Y3Rpb25bNF0pIHVybFtrZXldID0gdXJsW2tleV0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIC8vXG4gIC8vIEFsc28gcGFyc2UgdGhlIHN1cHBsaWVkIHF1ZXJ5IHN0cmluZyBpbiB0byBhbiBvYmplY3QuIElmIHdlJ3JlIHN1cHBsaWVkXG4gIC8vIHdpdGggYSBjdXN0b20gcGFyc2VyIGFzIGZ1bmN0aW9uIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgYnVpbGQtaW5cbiAgLy8gcGFyc2VyLlxuICAvL1xuICBpZiAocGFyc2VyKSB1cmwucXVlcnkgPSBwYXJzZXIodXJsLnF1ZXJ5KTtcblxuICAvL1xuICAvLyBJZiB0aGUgVVJMIGlzIHJlbGF0aXZlLCByZXNvbHZlIHRoZSBwYXRobmFtZSBhZ2FpbnN0IHRoZSBiYXNlIFVSTC5cbiAgLy9cbiAgaWYgKFxuICAgICAgcmVsYXRpdmVcbiAgICAmJiBsb2NhdGlvbi5zbGFzaGVzXG4gICAgJiYgdXJsLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nXG4gICAgJiYgKHVybC5wYXRobmFtZSAhPT0gJycgfHwgbG9jYXRpb24ucGF0aG5hbWUgIT09ICcnKVxuICApIHtcbiAgICB1cmwucGF0aG5hbWUgPSByZXNvbHZlKHVybC5wYXRobmFtZSwgbG9jYXRpb24ucGF0aG5hbWUpO1xuICB9XG5cbiAgLy9cbiAgLy8gV2Ugc2hvdWxkIG5vdCBhZGQgcG9ydCBudW1iZXJzIGlmIHRoZXkgYXJlIGFscmVhZHkgdGhlIGRlZmF1bHQgcG9ydCBudW1iZXJcbiAgLy8gZm9yIGEgZ2l2ZW4gcHJvdG9jb2wuIEFzIHRoZSBob3N0IGFsc28gY29udGFpbnMgdGhlIHBvcnQgbnVtYmVyIHdlJ3JlIGdvaW5nXG4gIC8vIG92ZXJyaWRlIGl0IHdpdGggdGhlIGhvc3RuYW1lIHdoaWNoIGNvbnRhaW5zIG5vIHBvcnQgbnVtYmVyLlxuICAvL1xuICBpZiAoIXJlcXVpcmVkKHVybC5wb3J0LCB1cmwucHJvdG9jb2wpKSB7XG4gICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWU7XG4gICAgdXJsLnBvcnQgPSAnJztcbiAgfVxuXG4gIC8vXG4gIC8vIFBhcnNlIGRvd24gdGhlIGBhdXRoYCBmb3IgdGhlIHVzZXJuYW1lIGFuZCBwYXNzd29yZC5cbiAgLy9cbiAgdXJsLnVzZXJuYW1lID0gdXJsLnBhc3N3b3JkID0gJyc7XG4gIGlmICh1cmwuYXV0aCkge1xuICAgIGluc3RydWN0aW9uID0gdXJsLmF1dGguc3BsaXQoJzonKTtcbiAgICB1cmwudXNlcm5hbWUgPSBpbnN0cnVjdGlvblswXSB8fCAnJztcbiAgICB1cmwucGFzc3dvcmQgPSBpbnN0cnVjdGlvblsxXSB8fCAnJztcbiAgfVxuXG4gIHVybC5vcmlnaW4gPSB1cmwucHJvdG9jb2wgJiYgdXJsLmhvc3QgJiYgdXJsLnByb3RvY29sICE9PSAnZmlsZTonXG4gICAgPyB1cmwucHJvdG9jb2wgKycvLycrIHVybC5ob3N0XG4gICAgOiAnbnVsbCc7XG5cbiAgLy9cbiAgLy8gVGhlIGhyZWYgaXMganVzdCB0aGUgY29tcGlsZWQgcmVzdWx0LlxuICAvL1xuICB1cmwuaHJlZiA9IHVybC50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgY29udmVuaWVuY2UgbWV0aG9kIGZvciBjaGFuZ2luZyBwcm9wZXJ0aWVzIGluIHRoZSBVUkwgaW5zdGFuY2UgdG9cbiAqIGluc3VyZSB0aGF0IHRoZXkgYWxsIHByb3BhZ2F0ZSBjb3JyZWN0bHkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhcnQgICAgICAgICAgUHJvcGVydHkgd2UgbmVlZCB0byBhZGp1c3QuXG4gKiBAcGFyYW0ge01peGVkfSB2YWx1ZSAgICAgICAgICBUaGUgbmV3bHkgYXNzaWduZWQgdmFsdWUuXG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IGZuICBXaGVuIHNldHRpbmcgdGhlIHF1ZXJ5LCBpdCB3aWxsIGJlIHRoZSBmdW5jdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCB0byBwYXJzZSB0aGUgcXVlcnkuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGVuIHNldHRpbmcgdGhlIHByb3RvY29sLCBkb3VibGUgc2xhc2ggd2lsbCBiZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCBmcm9tIHRoZSBmaW5hbCB1cmwgaWYgaXQgaXMgdHJ1ZS5cbiAqIEByZXR1cm5zIHtVUkx9IFVSTCBpbnN0YW5jZSBmb3IgY2hhaW5pbmcuXG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHNldChwYXJ0LCB2YWx1ZSwgZm4pIHtcbiAgdmFyIHVybCA9IHRoaXM7XG5cbiAgc3dpdGNoIChwYXJ0KSB7XG4gICAgY2FzZSAncXVlcnknOlxuICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gKGZuIHx8IHFzLnBhcnNlKSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwb3J0JzpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoIXJlcXVpcmVkKHZhbHVlLCB1cmwucHJvdG9jb2wpKSB7XG4gICAgICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgICAgICB1cmxbcGFydF0gPSAnJztcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWUgKyc6JysgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdG5hbWUnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICh1cmwucG9ydCkgdmFsdWUgKz0gJzonKyB1cmwucG9ydDtcbiAgICAgIHVybC5ob3N0ID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hvc3QnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICgvOlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNwbGl0KCc6Jyk7XG4gICAgICAgIHVybC5wb3J0ID0gdmFsdWUucG9wKCk7XG4gICAgICAgIHVybC5ob3N0bmFtZSA9IHZhbHVlLmpvaW4oJzonKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybC5ob3N0bmFtZSA9IHZhbHVlO1xuICAgICAgICB1cmwucG9ydCA9ICcnO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3Byb3RvY29sJzpcbiAgICAgIHVybC5wcm90b2NvbCA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICB1cmwuc2xhc2hlcyA9ICFmbjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncGF0aG5hbWUnOlxuICAgIGNhc2UgJ2hhc2gnOlxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBjaGFyID0gcGFydCA9PT0gJ3BhdGhuYW1lJyA/ICcvJyA6ICcjJztcbiAgICAgICAgdXJsW3BhcnRdID0gdmFsdWUuY2hhckF0KDApICE9PSBjaGFyID8gY2hhciArIHZhbHVlIDogdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmxbcGFydF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnMgPSBydWxlc1tpXTtcblxuICAgIGlmIChpbnNbNF0pIHVybFtpbnNbMV1dID0gdXJsW2luc1sxXV0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIHVybC5vcmlnaW4gPSB1cmwucHJvdG9jb2wgJiYgdXJsLmhvc3QgJiYgdXJsLnByb3RvY29sICE9PSAnZmlsZTonXG4gICAgPyB1cmwucHJvdG9jb2wgKycvLycrIHVybC5ob3N0XG4gICAgOiAnbnVsbCc7XG5cbiAgdXJsLmhyZWYgPSB1cmwudG9TdHJpbmcoKTtcblxuICByZXR1cm4gdXJsO1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgcHJvcGVydGllcyBiYWNrIGluIHRvIGEgdmFsaWQgYW5kIGZ1bGwgVVJMIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmdpZnkgT3B0aW9uYWwgcXVlcnkgc3RyaW5naWZ5IGZ1bmN0aW9uLlxuICogQHJldHVybnMge1N0cmluZ30gQ29tcGlsZWQgdmVyc2lvbiBvZiB0aGUgVVJMLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyhzdHJpbmdpZnkpIHtcbiAgaWYgKCFzdHJpbmdpZnkgfHwgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIHN0cmluZ2lmeSkgc3RyaW5naWZ5ID0gcXMuc3RyaW5naWZ5O1xuXG4gIHZhciBxdWVyeVxuICAgICwgdXJsID0gdGhpc1xuICAgICwgcHJvdG9jb2wgPSB1cmwucHJvdG9jb2w7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLmNoYXJBdChwcm90b2NvbC5sZW5ndGggLSAxKSAhPT0gJzonKSBwcm90b2NvbCArPSAnOic7XG5cbiAgdmFyIHJlc3VsdCA9IHByb3RvY29sICsgKHVybC5zbGFzaGVzID8gJy8vJyA6ICcnKTtcblxuICBpZiAodXJsLnVzZXJuYW1lKSB7XG4gICAgcmVzdWx0ICs9IHVybC51c2VybmFtZTtcbiAgICBpZiAodXJsLnBhc3N3b3JkKSByZXN1bHQgKz0gJzonKyB1cmwucGFzc3dvcmQ7XG4gICAgcmVzdWx0ICs9ICdAJztcbiAgfVxuXG4gIHJlc3VsdCArPSB1cmwuaG9zdCArIHVybC5wYXRobmFtZTtcblxuICBxdWVyeSA9ICdvYmplY3QnID09PSB0eXBlb2YgdXJsLnF1ZXJ5ID8gc3RyaW5naWZ5KHVybC5xdWVyeSkgOiB1cmwucXVlcnk7XG4gIGlmIChxdWVyeSkgcmVzdWx0ICs9ICc/JyAhPT0gcXVlcnkuY2hhckF0KDApID8gJz8nKyBxdWVyeSA6IHF1ZXJ5O1xuXG4gIGlmICh1cmwuaGFzaCkgcmVzdWx0ICs9IHVybC5oYXNoO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cblVybC5wcm90b3R5cGUgPSB7IHNldDogc2V0LCB0b1N0cmluZzogdG9TdHJpbmcgfTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgVVJMIHBhcnNlciBhbmQgc29tZSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdGhhdCBtaWdodCBiZSB1c2VmdWwgZm9yXG4vLyBvdGhlcnMgb3IgdGVzdGluZy5cbi8vXG5VcmwuZXh0cmFjdFByb3RvY29sID0gZXh0cmFjdFByb3RvY29sO1xuVXJsLmxvY2F0aW9uID0gbG9sY2F0aW9uO1xuVXJsLnRyaW1MZWZ0ID0gdHJpbUxlZnQ7XG5VcmwucXMgPSBxcztcblxubW9kdWxlLmV4cG9ydHMgPSBVcmw7XG4iLCJjb25zdCBVUkwgPSByZXF1aXJlKCd1cmwtcGFyc2UnKTtcbmNvbnN0IGNhc2VsZXNzID0gcmVxdWlyZSgnY2FzZWxlc3MnKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZnJpc2JlZScpO1xuY29uc3QgcXMgPSByZXF1aXJlKCdxcycpO1xuY29uc3QgdXJsSm9pbiA9IHJlcXVpcmUoJ3VybC1qb2luJyk7XG5jb25zdCB7IGJvb2xlYW4gfSA9IHJlcXVpcmUoJ2Jvb2xlYW4nKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bmFzc2lnbmVkLWltcG9ydFxucmVxdWlyZSgnY3Jvc3MtZmV0Y2gvcG9seWZpbGwnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bmFzc2lnbmVkLWltcG9ydFxucmVxdWlyZSgnYWJvcnRjb250cm9sbGVyLXBvbHlmaWxsL2Rpc3QvcG9seWZpbGwtcGF0Y2gtZmV0Y2gnKTtcblxuY29uc3QgSW50ZXJjZXB0b3IgPSByZXF1aXJlKCcuL2ludGVyY2VwdG9yJyk7XG5cbmNvbnN0IE1FVEhPRFMgPSBbJ0dFVCcsICdIRUFEJywgJ1BPU1QnLCAnUFVUJywgJ0RFTEVURScsICdPUFRJT05TJywgJ1BBVENIJ107XG5jb25zdCBNT0RFUyA9IFsnbm8tY29ycycsICdjb3JzJywgJ3NhbWUtb3JpZ2luJ107XG5jb25zdCBDQUNIRSA9IFtcbiAgJ2RlZmF1bHQnLFxuICAnbm8tY2FjaGUnLFxuICAncmVsb2FkJyxcbiAgJ2ZvcmNlLWNhY2hlJyxcbiAgJ29ubHktaWYtY2FjaGVkJ1xuXTtcbmNvbnN0IENSRURFTlRJQUxTID0gWydpbmNsdWRlJywgJ3NhbWUtb3JpZ2luJywgJ29taXQnXTtcbmNvbnN0IFJFRElSRUNUID0gWydtYW51YWwnLCAnZm9sbG93JywgJ2Vycm9yJ107XG5jb25zdCBSRUZFUlJFUiA9IFsnbm8tcmVmZXJyZXInLCAnY2xpZW50J107XG5cbmNvbnN0IHJlc3BQcm9wZXJ0aWVzID0ge1xuICByZWFkT25seTogW1xuICAgICdoZWFkZXJzJyxcbiAgICAnb2snLFxuICAgICdyZWRpcmVjdGVkJyxcbiAgICAnc3RhdHVzJyxcbiAgICAnc3RhdHVzVGV4dCcsXG4gICAgJ3R5cGUnLFxuICAgICd1cmwnLFxuICAgICdib2R5VXNlZCdcbiAgXSxcbiAgd3JpdGFibGU6IFsndXNlRmluYWxVUkwnXSxcbiAgY2FsbGFibGU6IFtcbiAgICAnY2xvbmUnLFxuICAgICdlcnJvcicsXG4gICAgJ3JlZGlyZWN0JyxcbiAgICAnYXJyYXlCdWZmZXInLFxuICAgICdibG9iJyxcbiAgICAnZm9ybURhdGEnLFxuICAgICdqc29uJyxcbiAgICAndGV4dCdcbiAgXVxufTtcblxuZnVuY3Rpb24gY3JlYXRlRnJpc2JlZVJlc3BvbnNlKG9yaWdSZXNwKSB7XG4gIGNvbnN0IHJlc3AgPSB7XG4gICAgb3JpZ2luYWxSZXNwb25zZTogb3JpZ1Jlc3BcbiAgfTtcblxuICByZXNwUHJvcGVydGllcy5yZWFkT25seS5mb3JFYWNoKHByb3AgPT5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcCwgcHJvcCwge1xuICAgICAgdmFsdWU6IG9yaWdSZXNwW3Byb3BdXG4gICAgfSlcbiAgKTtcblxuICByZXNwUHJvcGVydGllcy53cml0YWJsZS5mb3JFYWNoKHByb3AgPT5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcCwgcHJvcCwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gb3JpZ1Jlc3BbcHJvcF07XG4gICAgICB9LFxuICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIG9yaWdSZXNwW3Byb3BdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSlcbiAgKTtcblxuICBsZXQgY2FsbGFibGUgPSBudWxsO1xuICByZXNwUHJvcGVydGllcy5jYWxsYWJsZS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNwLCBwcm9wLCB7XG4gICAgICB2YWx1ZTpcbiAgICAgICAgKChjYWxsYWJsZSA9IG9yaWdSZXNwW3Byb3BdKSxcbiAgICAgICAgdHlwZW9mIGNhbGxhYmxlID09PSAnZnVuY3Rpb24nICYmIGNhbGxhYmxlLmJpbmQob3JpZ1Jlc3ApKVxuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCBoZWFkZXJzT2JqID0ge307XG4gIG9yaWdSZXNwLmhlYWRlcnMuZm9yRWFjaChwYWlyID0+IHtcbiAgICBoZWFkZXJzT2JqW3BhaXJbMF1dID0gcGFpclsxXTtcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNwLCAnaGVhZGVyc09iaicsIHtcbiAgICB2YWx1ZTogaGVhZGVyc09ialxuICB9KTtcblxuICByZXR1cm4gcmVzcDtcbn1cblxuY2xhc3MgRnJpc2JlZSB7XG4gIGNvbnN0cnVjdG9yKG9wdHMgPSB7fSkge1xuICAgIHRoaXMub3B0cyA9IHtcbiAgICAgIHByZXZlbnRCb2R5T25NZXRob2RzOiBbJ0dFVCcsICdIRUFEJywgJ0RFTEVURScsICdDT05ORUNUJ10sXG4gICAgICBpbnRlcmNlcHRhYmxlTWV0aG9kczogTUVUSE9EUyxcbiAgICAgIG1vZGU6ICdzYW1lLW9yaWdpbicsXG4gICAgICBjYWNoZTogJ2RlZmF1bHQnLFxuICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsXG4gICAgICByZWRpcmVjdDogJ2ZvbGxvdycsXG4gICAgICByZWZlcnJlcjogJ2NsaWVudCcsXG4gICAgICBib2R5OiBudWxsLFxuICAgICAgcGFyYW1zOiBudWxsLFxuICAgICAgbG9nUmVxdWVzdDogZmFsc2UsXG4gICAgICBsb2dSZXNwb25zZTogZmFsc2UsXG4gICAgICBwYXJzZToge1xuICAgICAgICBpZ25vcmVRdWVyeVByZWZpeDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHN0cmluZ2lmeToge1xuICAgICAgICBhZGRRdWVyeVByZWZpeDogdHJ1ZSxcbiAgICAgICAgZm9ybWF0OiAnUkZDMTczOCcsXG4gICAgICAgIGFycmF5Rm9ybWF0OiAnaW5kaWNlcydcbiAgICAgIH0sXG4gICAgICAuLi5vcHRzXG4gICAgfTtcblxuICAgIGxldCBsb2NhbEFib3J0Q29udHJvbGxlcjtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2Fib3J0Q29udHJvbGxlcicsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgZ2V0KCkge1xuICAgICAgICBpZiAoIWxvY2FsQWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgICAgbG9jYWxBYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgICAgbG9jYWxBYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gd2hlbiB0aGlzIGlzIGFib3J0ZWQsIG51bGwgb3V0IHRoZSBsb2NhbEFib3J0Q29udHJvbGxlclxuICAgICAgICAgICAgLy8gc28gd2UnbGwgY3JlYXRlIGEgbmV3IG9uZSBuZXh0IHRpbWUgd2UgbmVlZCBpdFxuICAgICAgICAgICAgbG9jYWxBYm9ydENvbnRyb2xsZXIgPSBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsQWJvcnRDb250cm9sbGVyO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgbG9jYWxBYm9ydFRva2VuTWFwID0gbmV3IE1hcCgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYWJvcnRUb2tlbk1hcCcsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gbG9jYWxBYm9ydFRva2VuTWFwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdwYXJzZUVycicsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6XG4gICAgICAgIG9wdHMucGFyc2VFcnIgfHxcbiAgICAgICAgbmV3IEVycm9yKFxuICAgICAgICAgIGBJbnZhbGlkIEpTT04gcmVjZWl2ZWQke1xuICAgICAgICAgICAgdGhpcy5vcHRzLmJhc2VVUkkgPyBgIGZyb20gJHt0aGlzLm9wdHMuYmFzZVVSSX1gIDogJydcbiAgICAgICAgICB9YFxuICAgICAgICApXG4gICAgfSk7XG5cbiAgICBpZiAob3B0cy5hcnJheUZvcm1hdCkge1xuICAgICAgdGhpcy5vcHRzLnBhcnNlLmFycmF5Rm9ybWF0ID0gJ2luZGljZXMnO1xuICAgICAgZGVsZXRlIG9wdHMuYXJyYXlGb3JtYXQ7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0cy5wcmV2ZW50Qm9keU9uTWV0aG9kcykpXG4gICAgICB0aGlzLm9wdHMucHJldmVudEJvZHlPbk1ldGhvZHMgPSB0aGlzLm9wdHMucHJldmVudEJvZHlPbk1ldGhvZHMubWFwKFxuICAgICAgICBtZXRob2QgPT4gbWV0aG9kLnRvVXBwZXJDYXNlKCkudHJpbSgpXG4gICAgICApO1xuXG4gICAgdGhpcy5vcHRzLnJhdyA9IGJvb2xlYW4odGhpcy5vcHRzLnJhdyk7XG5cbiAgICBpZiAodGhpcy5vcHRzLmF1dGgpIHRoaXMuYXV0aCh0aGlzLm9wdHMuYXV0aCk7XG5cbiAgICBNRVRIT0RTLmZvckVhY2gobWV0aG9kID0+IHtcbiAgICAgIHRoaXNbbWV0aG9kLnRvTG93ZXJDYXNlKCldID0gdGhpcy5fc2V0dXAobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xuICAgIH0pO1xuXG4gICAgLy8gYWxpYXMgZm9yIGB0aGlzLmRlbGAgLT4gYHRoaXMuZGVsZXRlYFxuICAgIHRoaXMuZGVsID0gdGhpcy5fc2V0dXAoJ2RlbGV0ZScpO1xuXG4gICAgLy8gaW50ZXJjZXB0b3Igc2hvdWxkIGJlIGluaXRpYWxpemVkIGFmdGVyIG1ldGhvZHMgc2V0dXBcbiAgICB0aGlzLmludGVyY2VwdG9yID0gbmV3IEludGVyY2VwdG9yKHRoaXMsIHRoaXMub3B0cy5pbnRlcmNlcHRhYmxlTWV0aG9kcyk7XG5cbiAgICAvLyBiaW5kIHNjb3BlIHRvIG1ldGhvZFxuICAgIHRoaXMuc2V0T3B0aW9ucyA9IHRoaXMuc2V0T3B0aW9ucy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYXV0aCA9IHRoaXMuYXV0aC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuand0ID0gdGhpcy5qd3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFib3J0ID0gdGhpcy5hYm9ydC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYWJvcnRBbGwgPSB0aGlzLmFib3J0QWxsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fcmVxdWVzdCA9IHRoaXMuX3JlcXVlc3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9wYXJzZUpTT04gPSB0aGlzLl9wYXJzZUpTT04uYmluZCh0aGlzKTtcbiAgICB0aGlzLl9mZXRjaCA9IHRoaXMuX2ZldGNoLmJpbmQodGhpcyk7XG4gIH1cblxuICBzZXRPcHRpb25zKG9wdHMpIHtcbiAgICB0aGlzLm9wdHMgPSB7IC4uLnRoaXMub3B0cywgLi4ub3B0cyB9O1xuICAgIHJldHVybiB0aGlzLm9wdHM7XG4gIH1cblxuICBhYm9ydCh0b2tlbikge1xuICAgIGNvbnN0IG1hcFZhbHVlID0gdGhpcy5hYm9ydFRva2VuTWFwLmdldCh0b2tlbik7XG4gICAgaWYgKG1hcFZhbHVlICYmIG1hcFZhbHVlLmFib3J0Q29udHJvbGxlcikge1xuICAgICAgbWFwVmFsdWUuYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG4gICAgfVxuICB9XG5cbiAgYWJvcnRBbGwoKSB7XG4gICAgdGhpcy5hYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgfVxuXG4gIF9zZXR1cChtZXRob2QpIHtcbiAgICByZXR1cm4gKG9yaWdpbmFsUGF0aCA9ICcvJywgb3JpZ2luYWxPcHRpb25zID0ge30pID0+IHtcbiAgICAgIGlmIChvcmlnaW5hbE9wdGlvbnMgJiYgdHlwZW9mIG9yaWdpbmFsT3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbGV0IGFib3J0Q29udHJvbGxlcjtcbiAgICAgICAgaWYgKG9yaWdpbmFsT3B0aW9ucy5hYm9ydFRva2VuKSB7XG4gICAgICAgICAgLy8gYWxsb3cgdG8gdXNlIGEgc2luZ2xlIHRva2VuIHRvIGNhbmNlbCBtdWx0aXBsZSByZXF1ZXN0c1xuICAgICAgICAgIGxldCBtYXBWYWx1ZSA9IHRoaXMuYWJvcnRUb2tlbk1hcC5nZXQob3JpZ2luYWxPcHRpb25zLmFib3J0VG9rZW4pO1xuICAgICAgICAgIGlmICghbWFwVmFsdWUpIHtcbiAgICAgICAgICAgIG1hcFZhbHVlID0ge1xuICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXI6IG5ldyBBYm9ydENvbnRyb2xsZXIoKSxcbiAgICAgICAgICAgICAgY291bnQ6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWFwVmFsdWUuY291bnQrKztcblxuICAgICAgICAgIHRoaXMuYWJvcnRUb2tlbk1hcC5zZXQob3JpZ2luYWxPcHRpb25zLmFib3J0VG9rZW4sIG1hcFZhbHVlKTtcbiAgICAgICAgICBhYm9ydENvbnRyb2xsZXIgPSBtYXBWYWx1ZS5hYm9ydENvbnRyb2xsZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlIHVzZXIgaGFzIGRlZmluZWQgdGhlaXIgb3duIHNpZ25hbCB3ZSB3b24ndCB1c2UgaXQgZGlyZWN0bHksIGJ1dCB3ZSdsbCBsaXN0ZW4gdG8gaXRcbiAgICAgICAgaWYgKG9yaWdpbmFsT3B0aW9ucy5zaWduYWwpIHtcbiAgICAgICAgICBvcmlnaW5hbE9wdGlvbnMuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT5cbiAgICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFib3J0IHRoaXMgcmVxdWVzdCB3aGVuZXZlciB0aGlzLmFib3J0Q29udHJvbGxlci5hYm9ydCgpIGdldHMgY2FsbGVkIC0gYS5rLmEuIC0gYWJvcnRBbGwoKVxuICAgICAgICB0aGlzLmFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PlxuICAgICAgICAgIGFib3J0Q29udHJvbGxlci5hYm9ydCgpXG4gICAgICAgICk7XG4gICAgICAgIG9yaWdpbmFsT3B0aW9ucy5zaWduYWwgPSBhYm9ydENvbnRyb2xsZXIuc2lnbmFsO1xuICAgICAgfVxuXG4gICAgICAvLyB0aGVzZSBjYW4ndCBjaGFuZ2Ugd2l0aCBpbnRlcmNlcHRvcnMsIG90aGVyd2lzZSB3ZSdyZSBpbiB3ZWlyZCBiZWhhdmlvdXIgbGFuZFxuICAgICAgY29uc3QgeyBzaWduYWwsIGFib3J0VG9rZW4gfSA9IG9yaWdpbmFsT3B0aW9ucztcblxuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3Qoe1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIG9yaWdpbmFsUGF0aCxcbiAgICAgICAgb3JpZ2luYWxPcHRpb25zLFxuICAgICAgICBzaWduYWwsXG4gICAgICAgIGFib3J0VG9rZW5cbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBfcmVxdWVzdCh7IG1ldGhvZCwgb3JpZ2luYWxQYXRoLCBvcmlnaW5hbE9wdGlvbnMsIHNpZ25hbCwgYWJvcnRUb2tlbiB9KSB7XG4gICAgcmV0dXJuIGFzeW5jIChwYXRoID0gb3JpZ2luYWxQYXRoLCBvcHRpb25zID0gb3JpZ2luYWxPcHRpb25zKSA9PiB7XG4gICAgICBkZWJ1ZygnZnJpc2JlZScsIG1ldGhvZCwgcGF0aCwgb3B0aW9ucyk7XG4gICAgICAvLyBwYXRoIG11c3QgYmUgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgcGF0aGAgbXVzdCBiZSBhIHN0cmluZycpO1xuXG4gICAgICAvLyBvdGhlcndpc2UgY2hlY2sgaWYgaXRzIGFuIG9iamVjdFxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgb3B0aW9uc2AgbXVzdCBiZSBhbiBvYmplY3QnKTtcblxuICAgICAgaWYgKG9wdGlvbnMuYWJvcnRUb2tlbiAhPT0gYWJvcnRUb2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fib3J0VG9rZW4gY2Fubm90IGJlIG1vZGlmaWVkIHZpYSBhbiBpbnRlcmNlcHRvcicpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5zaWduYWwgIT09IHNpZ25hbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NpZ25hbCBjYW5ub3QgYmUgbW9kaWZpZWQgdmlhIGFuIGludGVyY2VwdG9yJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kID09PSAnZGVsJyA/ICdERUxFVEUnIDogbWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICAgIG1vZGU6IG9wdGlvbnMubW9kZSB8fCB0aGlzLm9wdHMubW9kZSxcbiAgICAgICAgY2FjaGU6IG9wdGlvbnMuY2FjaGUgfHwgdGhpcy5vcHRzLmNhY2hlLFxuICAgICAgICBjcmVkZW50aWFsczogb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLm9wdHMuY3JlZGVudGlhbHMsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAuLi50aGlzLm9wdHMuaGVhZGVycyxcbiAgICAgICAgICAuLi5vcHRpb25zLmhlYWRlcnNcbiAgICAgICAgfSxcbiAgICAgICAgcmVkaXJlY3Q6IG9wdGlvbnMucmVkaXJlY3QgfHwgdGhpcy5vcHRzLnJlZGlyZWN0LFxuICAgICAgICByZWZlcnJlcjogb3B0aW9ucy5yZWZlcnJlciB8fCB0aGlzLm9wdHMucmVmZXJyZXIsXG4gICAgICAgIHNpZ25hbFxuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMub3B0cy5ib2R5IHx8IG9wdGlvbnMuYm9keSlcbiAgICAgICAgb3B0cy5ib2R5ID0gb3B0aW9ucy5ib2R5ID8gb3B0aW9ucy5ib2R5IDogdGhpcy5vcHRzLmJvZHk7XG5cbiAgICAgIGlmICh0aGlzLm9wdHMucGFyYW1zIHx8IG9wdGlvbnMucGFyYW1zKVxuICAgICAgICBvcHRzLnBhcmFtcyA9IHsgLi4udGhpcy5vcHRzLnBhcmFtcywgLi4ub3B0aW9ucy5wYXJhbXMgfTtcblxuICAgICAgLy8gcmVtb3ZlIGFueSBuaWwgb3IgYmxhbmsgaGVhZGVyc1xuICAgICAgLy8gKGUuZy4gdG8gYXV0b21hdGljYWxseSBzZXQgQ29udGVudC1UeXBlIHdpdGggYEZvcm1EYXRhYCBib3VuZGFyeSlcbiAgICAgIE9iamVjdC5rZXlzKG9wdHMuaGVhZGVycykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIG9wdHMuaGVhZGVyc1trZXldID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgIG9wdHMuaGVhZGVyc1trZXldID09PSBudWxsIHx8XG4gICAgICAgICAgb3B0cy5oZWFkZXJzW2tleV0gPT09ICcnXG4gICAgICAgIClcbiAgICAgICAgICBkZWxldGUgb3B0cy5oZWFkZXJzW2tleV07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYyA9IGNhc2VsZXNzKG9wdHMuaGVhZGVycyk7XG5cbiAgICAgIC8vIHBhcnNlIHRoZSBwYXRoIHNvIHRoYXQgd2UgY2FuIHN1cHBvcnRcbiAgICAgIC8vIG1peGVkIHBhcmFtcyBpbiBib2R5IGFuZCBpbiB1cmwgcGF0aFxuICAgICAgLy8gZS5nLiBgYXBpLmdldCgnL3YxL3VzZXJzP3NlYXJjaD1uaWZ0eWBcbiAgICAgIC8vID0gL3YxL3VzZXJzP3NlYXJjaD1uaWZ0eVxuICAgICAgLy8gZS5nLiBgYXBpLmdldCgnL3YxL3VzZXJzP3NlYXJjaD1uaWZ0eScsIHsgZm9vOiAnYmFyJyB9KTtcbiAgICAgIC8vID0gL3YxL3VzZXJzP3NlYXJjaD1uaWZ0eSZmb289YmFyXG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHBhdGgsIHt9LCBmYWxzZSk7XG4gICAgICBjb25zdCBocmVmID1cbiAgICAgICAgdXJsLm9yaWdpbiA9PT0gJ251bGwnXG4gICAgICAgICAgPyB0aGlzLm9wdHMuYmFzZVVSSVxuICAgICAgICAgICAgPyB1cmxKb2luKHRoaXMub3B0cy5iYXNlVVJJLCB1cmwucGF0aG5hbWUpXG4gICAgICAgICAgICA6IHVybC5wYXRobmFtZVxuICAgICAgICAgIDogYCR7dXJsLm9yaWdpbn0ke3VybC5wYXRobmFtZX1gO1xuICAgICAgbGV0IHF1ZXJ5ID0gcXMucGFyc2UodXJsLnF1ZXJ5LCBvcHRpb25zLnBhcnNlIHx8IHRoaXMub3B0cy5wYXJzZSk7XG5cbiAgICAgIC8vIGFsbG93IHBhcmFtcyB0byBiZSBwYXNzZWRcbiAgICAgIGlmIChvcHRpb25zLnBhcmFtcyB8fCB0aGlzLm9wdHMucGFyYW1zKVxuICAgICAgICBxdWVyeSA9IHsgLi4udGhpcy5vcHRzLnBhcmFtcywgLi4ub3B0aW9ucy5wYXJhbXMsIC4uLnF1ZXJ5IH07XG5cbiAgICAgIC8vIGluIG9yZGVyIHRvIHN1cHBvcnQgQW5kcm9pZCBQT1NUIHJlcXVlc3RzXG4gICAgICAvLyB3ZSBtdXN0IGFsbG93IGFuIGVtcHR5IGJvZHkgdG8gYmUgc2VudFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9pc3N1ZXMvNDg5MFxuICAgICAgaWYgKHR5cGVvZiBvcHRzLmJvZHkgPT09ICd1bmRlZmluZWQnICYmIG9wdHMubWV0aG9kID09PSAnUE9TVCcpIHtcbiAgICAgICAgb3B0cy5ib2R5ID0gJyc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRzLmJvZHkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGFjY29yZGluZyB0byBSRkM3MjMxLCBgR0VUYCwgYEhFQURgLCBgREVMRVRFYCwgYW5kIGBDT05ORUNUYDpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gPiBBIHBheWxvYWQgd2l0aGluIGEgJE1FVEhPRCByZXF1ZXN0IG1lc3NhZ2UgaGFzIG5vIGRlZmluZWQgc2VtYW50aWNzO1xuICAgICAgICAvLyA+IHNlbmRpbmcgYSBwYXlsb2FkIGJvZHkgb24gYSAkTUVUSE9EIHJlcXVlc3QgbWlnaHQgY2F1c2Ugc29tZSBleGlzdGluZ1xuICAgICAgICAvLyA+IGltcGxlbWVudGF0aW9ucyB0byByZWplY3QgdGhlIHJlcXVlc3QuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIDxodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMT5cbiAgICAgICAgLy9cbiAgICAgICAgY29uc3QgcHJldmVudEJvZHlPbk1ldGhvZHMgPVxuICAgICAgICAgIG9wdGlvbnMucHJldmVudEJvZHlPbk1ldGhvZHMgfHwgdGhpcy5vcHRzLnByZXZlbnRCb2R5T25NZXRob2RzO1xuICAgICAgICBkZWJ1ZygncHJldmVudEJvZHlPbk1ldGhvZHMnLCBwcmV2ZW50Qm9keU9uTWV0aG9kcyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHByZXZlbnRCb2R5T25NZXRob2RzKSAmJlxuICAgICAgICAgIHByZXZlbnRCb2R5T25NZXRob2RzLmluY2x1ZGVzKG9wdHMubWV0aG9kKVxuICAgICAgICApIHtcbiAgICAgICAgICBxdWVyeSA9IHsgLi4ub3B0cy5ib2R5LCAuLi5xdWVyeSB9O1xuICAgICAgICAgIGRlbGV0ZSBvcHRzLmJvZHk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgYy5nZXQoJ0NvbnRlbnQtVHlwZScpICYmXG4gICAgICAgICAgYy5nZXQoJ0NvbnRlbnQtVHlwZScpLnNwbGl0KCc7JylbMF0gPT09ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICApIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb3B0cy5ib2R5ID0gSlNPTi5zdHJpbmdpZnkob3B0cy5ib2R5KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgcXVlcnlzdHJpbmcgPSBxcy5zdHJpbmdpZnkoXG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICBvcHRpb25zLnN0cmluZ2lmeSB8fCB0aGlzLm9wdHMuc3RyaW5naWZ5XG4gICAgICApO1xuXG4gICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICBsZXQgZXJyb3I7XG4gICAgICB0cnkge1xuICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuX2ZldGNoKFxuICAgICAgICAgIGhyZWYgKyBxdWVyeXN0cmluZyxcbiAgICAgICAgICBvcHRzLFxuICAgICAgICAgIHR5cGVvZiBvcHRpb25zLnJhdyA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5yYXcgOiB0aGlzLm9wdHMucmF3XG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgZXJyb3IgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIC8vIHVwZGF0ZSB0aGUgYWJvcnRUb2tlbk1hcFxuICAgICAgY29uc3QgbWFwVmFsdWUgPSB0aGlzLmFib3J0VG9rZW5NYXAuZ2V0KG9wdGlvbnMuYWJvcnRUb2tlbik7XG4gICAgICBpZiAobWFwVmFsdWUpIHtcbiAgICAgICAgaWYgKG1hcFZhbHVlLmNvdW50IC0gMSA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuYWJvcnRUb2tlbk1hcC5kZWxldGUob3B0aW9ucy5hYm9ydFRva2VuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFib3J0VG9rZW5NYXAuc2V0KG9wdGlvbnMuYWJvcnRUb2tlbiwge1xuICAgICAgICAgICAgLi4ubWFwVmFsdWUsXG4gICAgICAgICAgICBjb3VudDogLS1tYXBWYWx1ZS5jb3VudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIF9wYXJzZUpTT04ocmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGF0dGVtcHQgdG8gcGFyc2UganNvbiBib2R5IHRvIHVzZSBhcyBlcnJvciBtZXNzYWdlXG4gICAgICBpZiAodHlwZW9mIHJlcy5qc29uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlcy5ib2R5ID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5ib2R5ID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgICAgICAgcmVzLmJvZHkgPSBKU09OLnBhcnNlKHJlcy5ib2R5KTtcbiAgICAgIH1cblxuICAgICAgLy8gYXR0ZW1wdCB0byB1c2UgYmV0dGVyIGFuZCBodW1hbi1mcmllbmRseSBlcnJvciBtZXNzYWdlc1xuICAgICAgaWYgKFxuICAgICAgICB0eXBlb2YgcmVzLmJvZHkgPT09ICdvYmplY3QnICYmXG4gICAgICAgIHR5cGVvZiByZXMuYm9keS5tZXNzYWdlID09PSAnc3RyaW5nJ1xuICAgICAgKSB7XG4gICAgICAgIHJlcy5lcnIgPSBuZXcgRXJyb3IocmVzLmJvZHkubWVzc2FnZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAhQXJyYXkuaXNBcnJheShyZXMuYm9keSkgJiZcbiAgICAgICAgLy8gYXR0ZW1wdCB0byB1dGlsaXplIFN0cmlwZS1pbnNwaXJlZCBlcnJvciBtZXNzYWdlc1xuICAgICAgICB0eXBlb2YgcmVzLmJvZHkuZXJyb3IgPT09ICdvYmplY3QnXG4gICAgICApIHtcbiAgICAgICAgaWYgKHJlcy5ib2R5LmVycm9yLm1lc3NhZ2UpIHJlcy5lcnIgPSBuZXcgRXJyb3IocmVzLmJvZHkuZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIGlmIChyZXMuYm9keS5lcnJvci5zdGFjaykgcmVzLmVyci5zdGFjayA9IHJlcy5ib2R5LmVycm9yLnN0YWNrO1xuICAgICAgICBpZiAocmVzLmJvZHkuZXJyb3IuY29kZSkgcmVzLmVyci5jb2RlID0gcmVzLmJvZHkuZXJyb3IuY29kZTtcbiAgICAgICAgaWYgKHJlcy5ib2R5LmVycm9yLnBhcmFtKSByZXMuZXJyLnBhcmFtID0gcmVzLmJvZHkuZXJyb3IucGFyYW07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXMuZXJyID0gdGhpcy5wYXJzZUVyciB8fCBlcnI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIGFzeW5jIF9mZXRjaChwYXRoLCBvcHRzLCByYXcpIHtcbiAgICBkZWJ1ZygnZmV0Y2gnLCBwYXRoLCBvcHRzKTtcbiAgICBkZWJ1ZygncmF3JywgcmF3KTtcbiAgICAvLyA8aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZldGNoX0FQSS9Vc2luZ19GZXRjaD5cbiAgICAvLyBtb2RlIC0gbm8tY29ycywgY29ycywgKnNhbWUtb3JpZ2luXG4gICAgLy8gY2FjaGUgLSAqZGVmYXVsdCwgbm8tY2FjaGUsIHJlbG9hZCwgZm9yY2UtY2FjaGUsIG9ubHktaWYtY2FjaGVkXG4gICAgLy8gY3JlZGVudGlhbHMgLSBpbmNsdWRlLCAqc2FtZS1vcmlnaW4sIG9taXRcbiAgICAvLyByZWRpcmVjdCAtIG1hbnVhbCwgZm9sbG93KiwgZXJyb3JcbiAgICAvLyByZWZlcnJlciAtIG5vLXJlZmVycmVyLCAqY2xpZW50XG4gICAgaWYgKCFNRVRIT0RTLmluY2x1ZGVzKG9wdHMubWV0aG9kKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgXCJtZXRob2RcIiBvZiBcIiR7b3B0cy5tZXRob2R9XCIsIG11c3QgYmUgb25lIG9mOiAke01FVEhPRFMuam9pbihcbiAgICAgICAgICAnLCAnXG4gICAgICAgICl9YFxuICAgICAgKTtcblxuICAgIGlmICghTU9ERVMuaW5jbHVkZXMob3B0cy5tb2RlKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgXCJtb2RlXCIgb2YgXCIke29wdHMubW9kZX1cIiwgbXVzdCBiZSBvbmUgb2Y6ICR7TU9ERVMuam9pbignLCAnKX1gXG4gICAgICApO1xuXG4gICAgaWYgKCFDQUNIRS5pbmNsdWRlcyhvcHRzLmNhY2hlKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgXCJjYWNoZVwiIG9mIFwiJHtvcHRzLmNhY2hlfVwiLCBtdXN0IGJlIG9uZSBvZjogJHtDQUNIRS5qb2luKFxuICAgICAgICAgICcsICdcbiAgICAgICAgKX1gXG4gICAgICApO1xuXG4gICAgaWYgKCFDUkVERU5USUFMUy5pbmNsdWRlcyhvcHRzLmNyZWRlbnRpYWxzKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgXCJjcmVkZW50aWFsc1wiIG9mIFwiJHtcbiAgICAgICAgICBvcHRzLmNyZWRlbnRpYWxzXG4gICAgICAgIH1cIiwgbXVzdCBiZSBvbmUgb2Y6ICR7Q1JFREVOVElBTFMuam9pbignLCAnKX1gXG4gICAgICApO1xuXG4gICAgaWYgKCFSRURJUkVDVC5pbmNsdWRlcyhvcHRzLnJlZGlyZWN0KSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgXCJyZWRpcmVjdFwiIG9mIFwiJHtcbiAgICAgICAgICBvcHRzLnJlZGlyZWN0XG4gICAgICAgIH1cIiwgbXVzdCBiZSBvbmUgb2Y6ICR7UkVESVJFQ1Quam9pbignLCAnKX1gXG4gICAgICApO1xuXG4gICAgaWYgKCFSRUZFUlJFUi5pbmNsdWRlcyhvcHRzLnJlZmVycmVyKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgXCJyZWZlcnJlclwiIG9mIFwiJHtcbiAgICAgICAgICBvcHRzLnJlZmVycmVyXG4gICAgICAgIH1cIiwgbXVzdCBiZSBvbmUgb2Y6ICR7UkVGRVJSRVIuam9pbignLCAnKX1gXG4gICAgICApO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdHMubG9nUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRoaXMub3B0cy5sb2dSZXF1ZXN0KHBhdGgsIG9wdHMpO1xuXG4gICAgY29uc3Qgb3JpZ2luYWxSZXMgPSBhd2FpdCBmZXRjaChwYXRoLCBvcHRzKTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRzLmxvZ1Jlc3BvbnNlID09PSAnZnVuY3Rpb24nKVxuICAgICAgdGhpcy5vcHRzLmxvZ1Jlc3BvbnNlKHBhdGgsIG9wdHMsIG9yaWdpbmFsUmVzKTtcblxuICAgIGNvbnN0IHJlcyA9IGNyZWF0ZUZyaXNiZWVSZXNwb25zZShvcmlnaW5hbFJlcyk7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSByZXMuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpO1xuXG4gICAgaWYgKHJlcy5vaykge1xuICAgICAgLy8gaWYgd2UganVzdCB3YW50IGEgcmF3IHJlc3BvbnNlIHRoZW4gcmV0dXJuIGVhcmx5XG4gICAgICBpZiAocmF3KSByZXR1cm4gcmVzLm9yaWdpbmFsUmVzcG9uc2U7XG5cbiAgICAgIC8vIGRldGVybWluZSB3aGV0aGVyIHdlJ3JlIHJldHVybmluZyB0ZXh0IG9yIGpzb24gZm9yIGJvZHlcbiAgICAgIGlmIChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXMuanNvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzLmJvZHkgPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMuYm9keSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICAgICAgICByZXMuYm9keSA9IEpTT04ucGFyc2UocmVzLmJvZHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vanNvbicpIHtcbiAgICAgICAgICAgIHJlcy5lcnIgPSB0aGlzLnBhcnNlRXJyIHx8IGVycjtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMuYm9keSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgcmVzLmVyciA9IG5ldyBFcnJvcihyZXMuc3RhdHVzVGV4dCk7XG5cbiAgICAvLyBjaGVjayBpZiB0aGUgcmVzcG9uc2Ugd2FzIEpTT04sIGFuZCBpZiBzbywgYmV0dGVyIHRoZSBlcnJvclxuICAgIC8vIChyZXR1cm4gZWFybHkgaWYgaXQncyBub3QpXG4gICAgaWYgKCFjb250ZW50VHlwZSB8fCAhY29udGVudFR5cGUuaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL2pzb24nKSkgcmV0dXJuIHJlcztcblxuICAgIHJldHVybiB0aGlzLl9wYXJzZUpTT04ocmVzKTtcbiAgfVxuXG4gIGF1dGgoY3JlZHMpIHtcbiAgICBpZiAodHlwZW9mIGNyZWRzID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgaW5kZXggPSBjcmVkcy5pbmRleE9mKCc6Jyk7XG4gICAgICBpZiAoaW5kZXggIT09IC0xKSBjcmVkcyA9IFtjcmVkcy5zbGljZSgwLCBpbmRleCksIGNyZWRzLnNsaWNlKGluZGV4ICsgMSldO1xuICAgIH1cblxuICAgIGlmICghQXJyYXkuaXNBcnJheShjcmVkcykpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgIGNyZWRzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIHN3aXRjaCAoY3JlZHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGNyZWRzID0gWycnLCAnJ107XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBjcmVkcy5wdXNoKCcnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhdXRoIG9wdGlvbiBjYW4gb25seSBoYXZlIHR3byBrZXlzIGBbdXNlciwgcGFzc11gJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjcmVkc1swXSAhPT0gJ3N0cmluZycpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdXRoIG9wdGlvbiBgdXNlcmAgbXVzdCBiZSBhIHN0cmluZycpO1xuXG4gICAgaWYgKHR5cGVvZiBjcmVkc1sxXSAhPT0gJ3N0cmluZycpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdXRoIG9wdGlvbiBgcGFzc2AgbXVzdCBiZSBhIHN0cmluZycpO1xuXG4gICAgaWYgKCFjcmVkc1swXSAmJiAhY3JlZHNbMV0pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm9wdHMuaGVhZGVycy5BdXRob3JpemF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wdHMuaGVhZGVycy5BdXRob3JpemF0aW9uID0gYEJhc2ljICR7QnVmZmVyLmZyb20oXG4gICAgICAgIGNyZWRzLmpvaW4oJzonKVxuICAgICAgKS50b1N0cmluZygnYmFzZTY0Jyl9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGp3dCh0b2tlbikge1xuICAgIGlmICh0b2tlbiA9PT0gbnVsbCB8fCB0b2tlbiA9PT0gdW5kZWZpbmVkKVxuICAgICAgZGVsZXRlIHRoaXMub3B0cy5oZWFkZXJzLkF1dGhvcml6YXRpb247XG4gICAgZWxzZSBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJylcbiAgICAgIHRoaXMub3B0cy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSBgQmVhcmVyICR7dG9rZW59YDtcbiAgICBlbHNlIHRocm93IG5ldyBUeXBlRXJyb3IoJ2p3dCB0b2tlbiBtdXN0IGJlIGEgc3RyaW5nJyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZyaXNiZWU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNsYXNzIEludGVyY2VwdG9yIHtcbiAgY29uc3RydWN0b3IoQVBJLCBpbnRlcmNlcHRhYmxlTWV0aG9kcyA9IFtdKSB7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcblxuICAgIGlmICghQVBJKSB0aHJvdyBuZXcgRXJyb3IoJ0FQSSBzaG91bGQgYmUgcGFzc2VkIHRvIHRoZSBJbnRlcmNlcHRvcicpO1xuXG4gICAgaWYgKGludGVyY2VwdGFibGVNZXRob2RzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRocm93IG5ldyBFcnJvcignbm8gbWV0aG9kcyB3ZXJlIGFkZGVkIHRvIGludGVyY2VwdGFibGVNZXRob2RzJyk7XG5cbiAgICBpbnRlcmNlcHRhYmxlTWV0aG9kcyA9IGludGVyY2VwdGFibGVNZXRob2RzLm1hcChtZXRob2QgPT5cbiAgICAgIG1ldGhvZC50b0xvd2VyQ2FzZSgpXG4gICAgKTtcblxuICAgIGlmIChcbiAgICAgIGludGVyY2VwdGFibGVNZXRob2RzLmluY2x1ZGVzKCdkZWxldGUnKSAmJlxuICAgICAgIWludGVyY2VwdGFibGVNZXRob2RzLmluY2x1ZGVzKCdkZWwnKVxuICAgIClcbiAgICAgIGludGVyY2VwdGFibGVNZXRob2RzLnB1c2goJ2RlbCcpO1xuXG4gICAgaWYgKFxuICAgICAgaW50ZXJjZXB0YWJsZU1ldGhvZHMuaW5jbHVkZXMoJ2RlbCcpICYmXG4gICAgICAhaW50ZXJjZXB0YWJsZU1ldGhvZHMuaW5jbHVkZXMoJ2RlbGV0ZScpXG4gICAgKVxuICAgICAgaW50ZXJjZXB0YWJsZU1ldGhvZHMucHVzaCgnZGVsZXRlJyk7XG5cbiAgICBpbnRlcmNlcHRhYmxlTWV0aG9kcy5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgICAgY29uc3QgbWV0aG9kRm4gPSBBUElbbWV0aG9kTmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIEFQSVttZXRob2ROYW1lLnRvTG93ZXJDYXNlKCldID0gKC4uLmFyZ3MpID0+XG4gICAgICAgIHRoaXMuaW50ZXJjZXB0ZWRNZXRob2QobWV0aG9kRm4oLi4uYXJncyksIC4uLmFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlbiAqL1xuICBpbnRlcmNlcHRlZE1ldGhvZChtZXRob2RGbiwgLi4uYXJncykge1xuICAgIGNvbnN0IHsgaW50ZXJjZXB0b3JzIH0gPSB0aGlzO1xuICAgIGNvbnN0IHJldmVyc2VkSW50ZXJjZXB0b3JzID0gaW50ZXJjZXB0b3JzLnNsaWNlKCkucmV2ZXJzZSgpO1xuXG4gICAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoYXJncyk7XG5cbiAgICAvLyBSZWdpc3RlciByZXF1ZXN0IGludGVyY2VwdG9yc1xuICAgIGludGVyY2VwdG9ycy5mb3JFYWNoKCh7IHJlcXVlc3QsIHJlcXVlc3RFcnJvciB9KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHJlcXVlc3QgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oYXJncyA9PiByZXF1ZXN0KC4uLltdLmNvbmNhdChhcmdzKSkpO1xuICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RXJyb3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLmNhdGNoKHJlcXVlc3RFcnJvcik7XG4gICAgfSk7XG5cbiAgICAvLyBSZWdpc3RlciBtZXRob2RGbiBjYWxsXG4gICAgaWYgKHR5cGVvZiBtZXRob2RGbiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oYXJncyA9PiBtZXRob2RGbiguLi5bXS5jb25jYXQoYXJncykpKTtcblxuICAgIC8vIFJlZ2lzdGVyIHJlc3BvbnNlIGludGVyY2VwdG9yc1xuICAgIHJldmVyc2VkSW50ZXJjZXB0b3JzLmZvckVhY2goKHsgcmVzcG9uc2UsIHJlc3BvbnNlRXJyb3IgfSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiByZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJykgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZSk7XG4gICAgICBpZiAodHlwZW9mIHJlc3BvbnNlRXJyb3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLmNhdGNoKHJlc3BvbnNlRXJyb3IpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuICovXG5cbiAgcmVnaXN0ZXIoaW50ZXJjZXB0b3IpIHtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5wdXNoKGludGVyY2VwdG9yKTtcbiAgICByZXR1cm4gKCkgPT4gdGhpcy51bnJlZ2lzdGVyKGludGVyY2VwdG9yKTtcbiAgfVxuXG4gIHVucmVnaXN0ZXIoaW50ZXJjZXB0b3IpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaW50ZXJjZXB0b3JzLmluZGV4T2YoaW50ZXJjZXB0b3IpO1xuICAgIGlmIChpbmRleCA+PSAwKSB0aGlzLmludGVyY2VwdG9ycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcbiAgfVxufTtcbiJdfQ==
